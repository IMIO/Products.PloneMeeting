<configure xmlns="http://namespaces.zope.org/zope"
           xmlns:browser="http://namespaces.zope.org/browser"
           xmlns:five="http://namespaces.zope.org/five"
           xmlns:i18n="http://namespaces.zope.org/i18n"
           i18n_domain="PloneMeeting">

  <subscriber for="zope.processlifetime.IProcessStarting"
      handler=".events.onZopeProcessStarting" />

  <subscriber for=".interfaces.IMeetingItem
                   OFS.interfaces.IObjectWillBeAddedEvent"
              handler=".events.onItemWillBeAdded" />

  <subscriber for=".interfaces.IMeetingItem
                   Products.Archetypes.interfaces.IObjectInitializedEvent"
              handler=".events.onItemInitialized" />

  <subscriber for=".interfaces.IMeetingItem
                   zope.lifecycleevent.interfaces.IObjectAddedEvent"
              handler=".events.onItemAdded" />

  <subscriber for=".interfaces.IMeetingItem
                   zope.lifecycleevent.IObjectModifiedEvent"
              handler=".events.onItemModified" />

  <subscriber for=".interfaces.IMeetingItem
                   OFS.interfaces.IObjectWillBeRemovedEvent"
              handler=".events.onItemWillBeRemoved" />

  <subscriber for=".interfaces.IMeetingItem
                   OFS.interfaces.IObjectWillBeMovedEvent"
              handler=".events.onItemWillBeMoved" />

  <subscriber for=".interfaces.IMeetingItem
                   zope.container.interfaces.IObjectRemovedEvent"
              handler=".events.onItemRemoved" />

  <subscriber for=".interfaces.IMeetingItem
                   zope.lifecycleevent.ObjectCopiedEvent"
              handler=".events.onItemCopied" />

  <subscriber for=".interfaces.IMeetingItem
                   zope.lifecycleevent.ObjectMovedEvent"
              handler=".events.onItemMoved" />

  <subscriber for=".interfaces.IMeetingItem
                   OFS.interfaces.IObjectClonedEvent"
              handler=".events.onItemCloned" />

  <subscriber for=".interfaces.IMeetingItem
                   Products.DCWorkflow.interfaces.IAfterTransitionEvent"
              handler=".events.onItemTransition" />

  <subscriber for=".interfaces.IMeetingItem
                   Products.DCWorkflow.interfaces.IBeforeTransitionEvent"
              handler=".events.onItemBeforeTransition" />

  <subscriber for=".content.meeting.IMeeting
                   Products.DCWorkflow.interfaces.IBeforeTransitionEvent"
              handler=".events.onMeetingBeforeTransition" />

  <subscriber for=".interfaces.IMeetingConfig
                   Products.DCWorkflow.interfaces.IBeforeTransitionEvent"
              handler=".events.onConfigBeforeTransition" />

  <subscriber for=".interfaces.IMeetingItem
                   Products.Archetypes.interfaces.IEditBegunEvent"
              handler=".events.onItemEditBegun" />

  <subscriber for=".interfaces.IMeetingItem
                   Products.Archetypes.interfaces.IEditCancelledEvent"
              handler=".events.onItemEditCancelled" />

  <subscriber for=".content.meeting.IMeeting
                   zope.lifecycleevent.interfaces.IObjectAddedEvent"
              handler=".events.onMeetingAdded" />

  <subscriber for=".content.meeting.IMeeting
                   zope.lifecycleevent.interfaces.IObjectCreatedEvent"
              handler=".events.onMeetingCreated" />

  <subscriber for=".content.meeting.IMeeting
                   zope.lifecycleevent.IObjectModifiedEvent"
              handler=".events.onMeetingModified" />

  <subscriber for=".content.meeting.IMeeting
                   Products.DCWorkflow.interfaces.IAfterTransitionEvent"
              handler=".events.onMeetingTransition" />

  <subscriber for=".content.meeting.IMeeting
                   zope.lifecycleevent.ObjectMovedEvent"
              handler=".events.onMeetingMoved" />

  <subscriber for=".content.meeting.IMeeting
                   OFS.interfaces.IObjectWillBeRemovedEvent"
              handler=".events.onMeetingWillBeRemoved" />

  <subscriber for=".content.meeting.IMeeting
                   zope.container.interfaces.IObjectRemovedEvent"
              handler=".events.onMeetingRemoved" />

  <subscriber for=".interfaces.IMeetingConfig
                   OFS.interfaces.IObjectWillBeRemovedEvent"
              handler=".events.onConfigWillBeRemoved" />

  <subscriber for=".content.category.IMeetingCategory
                   OFS.interfaces.IObjectWillBeRemovedEvent"
              handler=".events.onCategoryWillBeRemoved" />

  <subscriber for=".content.organization.IPMOrganization
                   OFS.interfaces.IObjectWillBeRemovedEvent"
              handler=".events.onOrgWillBeRemoved" />

  <subscriber for=".content.organization.IPMOrganization
                   zope.container.interfaces.IObjectRemovedEvent"
              handler=".events.onOrgRemoved" />

  <subscriber for=".interfaces.IConfigElement
                   zope.lifecycleevent.interfaces.IObjectAddedEvent"
              handler=".events.onConfigOrPloneElementAdded" />

  <subscriber for=".interfaces.IConfigElement
                   zope.lifecycleevent.IObjectModifiedEvent"
              handler=".events.onConfigOrPloneElementModified" />

  <subscriber for=".interfaces.IConfigElement
                   Products.DCWorkflow.interfaces.IAfterTransitionEvent"
              handler=".events.onConfigOrPloneElementTransition" />

  <subscriber for=".interfaces.IConfigElement
                   zope.container.interfaces.IObjectRemovedEvent"
              handler=".events.onConfigOrPloneElementRemoved" />

  <subscriber for=".interfaces.IPloneElement
                   zope.lifecycleevent.interfaces.IObjectAddedEvent"
              handler=".events.onConfigOrPloneElementAdded" />

  <subscriber for=".interfaces.IPloneElement
                   zope.lifecycleevent.IObjectModifiedEvent"
              handler=".events.onConfigOrPloneElementModified" />

  <subscriber for=".interfaces.IPloneElement
                   Products.DCWorkflow.interfaces.IAfterTransitionEvent"
              handler=".events.onConfigOrPloneElementTransition" />

  <subscriber for=".interfaces.IPloneElement
                   zope.container.interfaces.IObjectRemovedEvent"
              handler=".events.onConfigOrPloneElementRemoved" />

  <subscriber for="Products.ATContentTypes.interfaces.IATBTreeFolder
                   Products.CMFPlone.interfaces.IReorderedEvent"
              handler=".events.onFolderReordered" />

  <!-- meetingadvice events -->
  <subscriber for=".content.advice.IMeetingAdvice
                   zope.lifecycleevent.IObjectModifiedEvent"
              handler=".events.onAdviceModified" />

  <subscriber for=".content.advice.IMeetingAdvice
                   plone.dexterity.events.EditFinishedEvent"
              handler=".events.onAdviceEditFinished" />

  <subscriber for=".content.advice.IMeetingAdvice
                   zope.lifecycleevent.interfaces.IObjectAddedEvent"
              handler=".events.onAdviceAdded" />

  <subscriber for=".content.advice.IMeetingAdvice
                   zope.container.interfaces.IObjectRemovedEvent"
              handler=".events.onAdviceRemoved" />

  <subscriber for=".content.advice.IMeetingAdvice
                   Products.DCWorkflow.interfaces.IAfterTransitionEvent"
              handler=".events.onAdviceTransition" />

  <!-- imio.annex events -->
  <subscriber for="imio.annex.content.annex.IAnnex
                   zope.lifecycleevent.interfaces.IObjectAddedEvent"
              handler=".events.onAnnexAdded" />

  <subscriber for="imio.annex.content.annex.IAnnex
                   plone.dexterity.events.EditFinishedEvent"
              handler=".events.onAnnexEditFinished" />

 <subscriber for="imio.annex.content.annex.IAnnex
                  collective.iconifiedcategory.interfaces.IIconifiedAttrChangedEvent"
             handler=".events.onAnnexAttrChanged" />

  <subscriber for="imio.annex.content.annex.IAnnex
                   zope.lifecycleevent.IObjectModifiedEvent"
              handler=".events.onAnnexModified" />

  <subscriber for="imio.annex.content.annex.IAnnex
                   zope.container.interfaces.IObjectRemovedEvent"
              handler=".events.onAnnexRemoved" />

  <subscriber for="imio.annex.content.annex.IAnnex
                   imio.annex.interfaces.IAnnexFileChangedEvent"
              handler=".events.onAnnexFileChanged" />

  <subscriber for=".interfaces.IConfigElement
                   collective.iconifiedcategory.interfaces.ICategorizedElementsUpdatedEvent"
              handler=".events.onCategorizedElementsUpdatedEvent" />

  <!-- collective.contact.core events -->
  <subscriber for="collective.contact.core.content.directory.IDirectory
                   plone.dexterity.events.AddBegunEvent"
              handler=".events.onOrgAddBegun" />
  <subscriber for="Products.PloneMeeting.content.organization.IPMOrganization
                   plone.dexterity.events.AddBegunEvent"
              handler=".events.onOrgAddBegun" />
  <subscriber for="Products.PloneMeeting.content.held_position.IPMHeldPosition
                   OFS.interfaces.IObjectWillBeRemovedEvent"
              handler=".events.onHeldPositionWillBeRemoved" />

  <!-- DashboardCollection events -->
  <subscriber for="collective.eeafaceted.collectionwidget.interfaces.IDashboardCollection
                   zope.lifecycleevent.interfaces.IObjectAddedEvent"
              handler=".events.onDashboardCollectionAdded" />

  <subscriber for="plone.registry.interfaces.IRecordModifiedEvent"
              handler=".events.onRegistryModified" />

  <!-- collective.contact.plonegroup Plone group created event -->
  <subscriber for="collective.contact.plonegroup.interfaces.IPlonegroupGroupCreatedEvent"
              handler=".events.onPlonegroupGroupCreated" />

  <!-- eea.facetednavigation settings changed event -->
  <subscriber for="eea.facetednavigation.interfaces.IFacetedNavigable
                   eea.facetednavigation.interfaces.IFacetedGlobalSettingsChangedEvent"
              handler=".events.onFacetedGlobalSettingsChanged" />

  <!-- PAS events -->
  <subscriber for="Products.PluggableAuthService.interfaces.events.IPrincipalAddedToGroupEvent"
              handler=".events.onPrincipalAddedToGroup" />
  <subscriber for="Products.PluggableAuthService.interfaces.events.IPrincipalRemovedFromGroupEvent"
              handler=".events.onPrincipalRemovedFromGroup" />

</configure>
