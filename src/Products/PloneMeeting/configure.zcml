<configure xmlns="http://namespaces.zope.org/zope"
           xmlns:browser="http://namespaces.zope.org/browser"
           xmlns:five="http://namespaces.zope.org/five"
           xmlns:i18n="http://namespaces.zope.org/i18n"
           xmlns:plone="http://namespaces.plone.org/plone"
           xmlns:zcml="http://namespaces.zope.org/zcml"
           i18n_domain="PloneMeeting">

  <!-- load "imio.pm.locales" and "communesplone.layout" first so translations are overrided -->
  <include package="imio.pm.locales" />
  <include package="communesplone.layout" />
  <include package="plonetheme.imioapps"/>
  <include package="imio.annex" />
  <include package="Products.PasswordStrength" />
  <include package="collective.behavior.internalnumber" />
  <include package="collective.ckeditor" />
  <include package="collective.contact.core" />
  <include package="collective.contact.plonegroup" />
  <include package="collective.dexteritytextindexer" />
  <include package="collective.documentviewer" />
  <include package="collective.datagridcolumns" />
  <include package="collective.eeafaceted.collectionwidget" />
  <include package="collective.eeafaceted.dashboard" />
  <include package="collective.iconifieddocumentactions" />
  <include package="collective.iconifiedcategory" />
  <include package="collective.js.tablednd" />
  <include package="collective.js.fancytree" />
  <include package="collective.js.jqueryui" />
  <include package="collective.messagesviewlet" />
  <include zcml:condition="installed collective.solr" package="collective.solr" />
  <include package="dexterity.localrolesfield" />
  <include package="ftw.labels" />
  <include package="imio.pm.ws" />
  <include package="imio.dashboard" />
  <include zcml:condition="installed imio.zamqp.pm" package="imio.zamqp.pm" />
  <include package="plone.app.caching" />
  <include package="plone.app.contenttypes" />
  <include package="plone.app.dexterity" />
  <include package="plone.directives.form" file="meta.zcml" />
  <include package="plone.directives.form" />
  <include package="plone.memoize" />
  <include package="plonemeeting.restapi" />
  <include package="Products.CMFPlacefulWorkflow"/>
  <include package="Products.CPUtils"/>
  <include package="Products.cron4plone" />
  <include package="Products.DataGridField" />
  <include package=".browser" />
  <include package=".ckeditor" />
  <include package=".content" />
  <include package=".documentgenerator" />
  <include package=".filters" />
  <include package=".ftw_labels" />
  <include package=".widgets" />
  <include package=".workflows" />

  <include file="columns.zcml" />
  <include file="events.zcml" />
  <include file="profiling.zcml" />
  <include file="vocabularies.zcml" />
  <includeOverrides file="overrides.zcml" />
  <includeOverrides file="ftw_labels/overrides.zcml" />

  <permission id="PloneMeeting.AddMeeting"
              title="PloneMeeting: Add Meeting" />
  <permission id="PloneMeeting.AddAdvice"
              title="PloneMeeting: Add advice" />
  <permission id="PloneMeeting.AddAnnex"
              title="PloneMeeting: Add annex" />
  <permission id="PloneMeeting.AddAnnexDecision"
              title="PloneMeeting: Add annexDecision" />
  <permission id="PloneMeeting.manage_internal_organization_fields"
              title="PloneMeeting: Manage internal organization fields" />
  <permission id="PloneMeeting.manage_item_category_fields"
              title="PloneMeeting: Manage item category fields" />
  <permission id="PloneMeeting.write_userid_field"
              title="PloneMeeting: Write userid field" />

  <adapter for=".interfaces.IMeetingItem"
           factory=".MeetingItem.MeetingItemWorkflowConditions"
           provides=".interfaces.IMeetingItemWorkflowConditions" />
  <adapter for=".interfaces.IMeetingItem"
           factory=".MeetingItem.MeetingItemWorkflowActions"
           provides=".interfaces.IMeetingItemWorkflowActions" />
  <adapter for="Products.PloneMeeting.interfaces.IMeeting"
           factory=".adapters.PMWfHistoryAdapter"
           name="workflow"
           provides="imio.history.interfaces.IImioWfHistory" />
  <adapter for="Products.PloneMeeting.content.meeting.IMeeting"
           factory=".adapters.PMWfHistoryAdapter"
           name="workflow"
           provides="imio.history.interfaces.IImioWfHistory" />
  <adapter for="Products.PloneMeeting.interfaces.IMeetingItem"
           factory=".adapters.PMWfHistoryAdapter"
           name="workflow"
           provides="imio.history.interfaces.IImioWfHistory" />
  <adapter for="Products.PloneMeeting.content.advice.IMeetingAdvice"
           factory=".adapters.PMWfHistoryAdapter"
           name="workflow"
           provides="imio.history.interfaces.IImioWfHistory" />

  <!-- searches useable as compoundcriterion -->
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.ItemsOfMyGroupsAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-of-my-groups" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.MyItemsTakenOverAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="my-items-taken-over" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.ItemsInCopyAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-in-copy" />

  <adapter for="*"
           factory="Products.PloneMeeting.adapters.ItemsToCorrectAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-to-correct" />

  <adapter for="*"
           factory="Products.PloneMeeting.adapters.ItemsToValidateOfHighestHierarchicLevelAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-to-validate-of-highest-hierarchic-level" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.ItemsToCorrectToValidateOfHighestHierarchicLevelAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-to-correct-to-validate-of-highest-hierarchic-level" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.AllItemsToValidateOfHighestHierarchicLevelAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="all-items-to-validate-of-highest-hierarchic-level" />

  <adapter for="*"
           factory="Products.PloneMeeting.adapters.ItemsToValidateOfEveryReviewerLevelsAndLowerLevelsAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-to-validate-of-every-reviewer-levels-and-lower-levels" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.ItemsToCorrectToValidateOfEveryReviewerLevelsAndLowerLevelsAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-to-correct-to-validate-of-every-reviewer-groups" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.AllItemsToValidateOfEveryReviewerLevelsAndLowerLevelsAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="all-items-to-validate-of-every-reviewer-groups" />

  <adapter for="*"
           factory="Products.PloneMeeting.adapters.ItemsToValidateOfMyReviewerGroupsAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-to-validate-of-my-reviewer-groups" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.ItemsToCorrectToValidateOfMyReviewerGroupsAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-to-correct-to-validate-of-my-reviewer-groups" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.AllItemsToValidateOfMyReviewerGroupsAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="all-items-to-validate-of-my-reviewer-groups" />

  <adapter for="*"
           factory="Products.PloneMeeting.adapters.ItemsToAdviceAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-to-advice" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.ItemsToAdviceWithoutHiddenDuringRedactionAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-to-advice-without-hidden-during-redaction" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.MyItemsToAdviceAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="my-items-to-advice" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.MyItemsToAdviceWithoutHiddenDuringRedactionAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="my-items-to-advice-without-hidden-during-redaction" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.ItemsToAdviceWithoutDelayAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-to-advice-without-delay" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.ItemsToAdviceWithDelayAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-to-advice-with-delay" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.ItemsToAdviceWithExceededDelayAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-to-advice-with-exceeded-delay" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.AdvisedItemsAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="advised-items" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.AdvisedItemsWithDelayAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="advised-items-with-delay" />

  <adapter for="*"
           factory="Products.PloneMeeting.adapters.DecidedItemsAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="decided-items" />

  <adapter for="*"
           factory="Products.PloneMeeting.adapters.PersonalLabelsAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-with-personal-labels" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.PMNegativePersonalLabelsAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-with-negative-personal-labels" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.PMNegativePreviousIndexValuesAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-with-negative-previous-index" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.SearchItemsOfMyCommitteesAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-of-my-committees" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.SearchItemsOfMyCommitteesEditableAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-of-my-committees-editable" />

  <adapter for="*"
           factory="Products.PloneMeeting.adapters.LastDecisionsAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="last-decisions" />

  <adapter factory=".validators.DXCertifiedSignaturesValidator" />


  <!-- IContentDeletable adapter override for PloneMeeting -->
  <adapter for="imio.annex.content.annex.IAnnex"
           factory=".adapters.AnnexContentDeletableAdapter"
           provides="imio.actionspanel.interfaces.IContentDeletable" />
  <adapter for="Products.PloneMeeting.content.advice.IMeetingAdvice"
           factory=".adapters.AdviceContentDeletableAdapter"
           provides="imio.actionspanel.interfaces.IContentDeletable" />
  <adapter for="Products.PloneMeeting.content.meeting.IMeeting"
           factory=".adapters.MeetingContentDeletableAdapter"
           provides="imio.actionspanel.interfaces.IContentDeletable" />
  <adapter for="Products.PloneMeeting.interfaces.IMeetingItem"
           factory=".adapters.MeetingItemContentDeletableAdapter"
           provides="imio.actionspanel.interfaces.IContentDeletable" />
  <adapter for="Products.PloneMeeting.content.organization.IPMOrganization"
           factory=".adapters.OrgContentDeletableAdapter"
           provides="imio.actionspanel.interfaces.IContentDeletable" />

  <!-- Indexes -->
  <adapter name="annexes_index" factory=".indexes.annexes_index" />
  <adapter name="Description" factory=".indexes.Description" />
  <adapter name="getConfigId" factory=".indexes.getConfigId" />
  <adapter name="getCategory" factory=".indexes.getCategory" />
  <adapter name="getCopyGroups" factory=".indexes.getCopyGroups" />
  <adapter name="getGroupsInCharge" factory=".indexes.getGroupsInCharge" />
  <adapter name="preferred_meeting_date" factory=".indexes.preferred_meeting_date" />
  <adapter name="preferred_meeting_uid" factory=".indexes.preferred_meeting_uid" />
  <adapter name="getTakenOverBy" factory=".indexes.getTakenOverBy" />
  <adapter name="indexAdvisers" factory=".indexes.indexAdvisers" />
  <adapter name="item_is_signed" factory=".indexes.item_is_signed" />
  <adapter name="meeting_date" factory=".indexes.meeting_date" />
  <adapter name="meeting_date" factory=".indexes.item_meeting_date" />
  <adapter name="meeting_uid" factory=".indexes.meeting_uid" />
  <adapter name="pm_technical_index" factory=".indexes.pm_technical_index" />
  <adapter name="previous_review_state" factory=".indexes.previous_review_state" />
  <adapter name="reviewProcessInfo" factory=".indexes.reviewProcessInfo" />
  <adapter name="SearchableText" factory=".indexes.SearchableText_item" />
  <adapter name="SearchableText" factory=".indexes.SearchableText_annex" />
  <adapter name="send_to_authority" factory=".indexes.send_to_authority" />
  <adapter name="sentToInfos" factory=".indexes.sentToInfos" />
  <adapter name="sortable_title" factory=".indexes.sortable_title" />
  <adapter name="templateUsingGroups" factory=".indexes.templateUsingGroups" />
  <adapter name="title_or_id" factory=".indexes.title_or_id" />
  <adapter name="to_discuss" factory=".indexes.to_discuss" />
  <adapter name="get_full_title" factory=".indexes.get_full_title" />
  <adapter name="contained_uids" factory=".indexes.contained_uids_item" />
  <adapter name="contained_uids" factory=".indexes.contained_uids_meeting" />
  <adapter name="committees_index" factory=".indexes.committees_index_item" />
  <adapter name="committees_index" factory=".indexes.committees_index_meeting" />
  <!-- content_category_uid for MeetingItem until it is DX -->
  <adapter name="content_category_uid" factory=".indexes.content_category_uid_item" />

  <adapter
    for="imio.annex.content.annex.IAnnex"
    provides="collective.iconifiedcategory.interfaces.IIconifiedInfos"
    factory=".adapters.PMCategorizedObjectInfoAdapter" />

  <!-- available on MeetingItem to compute internalNotes releated local_roles -->
  <adapter
    for="Products.PloneMeeting.interfaces.IMeetingItem"
    provides="collective.iconifiedcategory.interfaces.IIconifiedInfos"
    factory=".adapters.PMCategorizedObjectInfoAdapter" />

  <adapter
    for="Products.PloneMeeting.interfaces.IMeetingContent
         zope.publisher.interfaces.browser.IBrowserRequest
         collective.iconifiedcategory.behaviors.iconifiedcategorization.IIconifiedCategorizationMarker"
    provides="collective.iconifiedcategory.interfaces.IIconifiedContent"
    factory=".adapters.PMCategorizedObjectAdapter" />

  <!-- IPrettyLink -->
  <adapter for="Products.PloneMeeting.content.advice.IMeetingAdvice"
           factory=".adapters.AdvicePrettyLinkAdapter"
           provides="imio.prettylink.interfaces.IPrettyLink" />
  <adapter for="Products.PloneMeeting.interfaces.IMeetingItem"
           factory=".adapters.ItemPrettyLinkAdapter"
           provides="imio.prettylink.interfaces.IPrettyLink" />
  <adapter for="Products.PloneMeeting.interfaces.IMeeting"
           factory=".adapters.MeetingPrettyLinkAdapter"
           provides="imio.prettylink.interfaces.IPrettyLink" />
  <adapter for="Products.PloneMeeting.content.meeting.IMeeting"
           factory=".adapters.MeetingPrettyLinkAdapter"
           provides="imio.prettylink.interfaces.IPrettyLink" />

  <adapter for="*"
           factory=".adapters.IconifiedCategoryConfigAdapter"
           provides="collective.iconifiedcategory.interfaces.IIconifiedCategoryConfig" />

  <adapter for="plone.app.contenttypes.interfaces.IFolder
                imio.annex.content.annex.IAnnex"
           factory=".adapters.IconifiedCategoryGroupAdapter"
           provides="collective.iconifiedcategory.interfaces.IIconifiedCategoryGroup" />
  <adapter for="plone.app.contenttypes.interfaces.IFolder
                Products.PloneMeeting.interfaces.IMeetingItem"
           factory=".adapters.IconifiedCategoryGroupAdapter"
           provides="collective.iconifiedcategory.interfaces.IIconifiedCategoryGroup" />
  <adapter for="plone.app.contenttypes.interfaces.IFolder
                Products.PloneMeeting.interfaces.IMeeting"
           factory=".adapters.IconifiedCategoryGroupAdapter"
           provides="collective.iconifiedcategory.interfaces.IIconifiedCategoryGroup" />
  <adapter for="plone.app.contenttypes.interfaces.IFolder
                Products.PloneMeeting.content.meeting.IMeeting"
           factory=".adapters.IconifiedCategoryGroupAdapter"
           provides="collective.iconifiedcategory.interfaces.IIconifiedCategoryGroup" />
  <adapter for="plone.app.contenttypes.interfaces.IFolder
                Products.PloneMeeting.content.advice.IMeetingAdvice"
           factory=".adapters.IconifiedCategoryGroupAdapter"
           provides="collective.iconifiedcategory.interfaces.IIconifiedCategoryGroup" />

  <adapter for="OFS.interfaces.IItem"
           factory=".adapters.PMCompletenessChangesHistoryAdapter"
           name="completeness_changes"
           provides="imio.history.interfaces.IImioHistory" />

  <adapter for="OFS.interfaces.IItem"
           factory=".adapters.PMEmergencyChangesHistoryAdapter"
           name="emergency_changes"
           provides="imio.history.interfaces.IImioHistory" />

  <adapter for="OFS.interfaces.IItem"
           factory=".adapters.PMDataChangesHistoryAdapter"
           name="data_changes"
           provides="imio.history.interfaces.IImioHistory" />

  <adapter for="OFS.interfaces.IItem"
           factory=".adapters.PMAdviceGivenHistoryAdapter"
           name="advice_given"
           provides="imio.history.interfaces.IImioHistory" />

  <adapter for="OFS.interfaces.IItem"
           provides="collective.documentgenerator.interfaces.IGenerablePODTemplates"
           factory=".adapters.PMGenerablePODTemplatesAdapter"/>

  <five:deprecatedManageAddDelete class=".MeetingItem.MeetingItem" />
  <five:deprecatedManageAddDelete class=".Meeting.Meeting" />
  <five:deprecatedManageAddDelete class=".MeetingCategory.MeetingCategory" />
  <five:deprecatedManageAddDelete class=".MeetingGroup.MeetingGroup" />
  <five:deprecatedManageAddDelete class=".MeetingConfig.MeetingConfig" />
  <five:deprecatedManageAddDelete class=".ToolPloneMeeting.ToolPloneMeeting" />

  <include file="profiles.zcml" />

  <!-- Make ToolPloneMeeting and MeetingConfig types portlet-aware -->
  <class class="Products.PloneMeeting.ToolPloneMeeting.ToolPloneMeeting">
    <implements interface="plone.portlets.interfaces.ILocalPortletAssignable" />
  </class>
  <!-- Make MeetingConfig ILabelRoot to be able to display the ftw.labels labels definition portlet,
       as well as IMultiPageSchema to display the form on several pages -->
  <class class="Products.PloneMeeting.MeetingConfig.MeetingConfig">
    <implements interface="plone.portlets.interfaces.ILocalPortletAssignable" />
    <implements interface="Products.Archetypes.interfaces.IMultiPageSchema" />
    <implements interface="ftw.labels.interfaces.ILabelRoot" />
  </class>

  <!-- Make Meeting behave like a Collection to be faceted navigable -->
  <class class="Products.PloneMeeting.content.meeting.Meeting">
    <implements interface="eea.facetednavigation.interfaces.IPossibleFacetedNavigable" />
    <implements interface="collective.plonefinder.browser.interfaces.IFinderUploadCapable" />
    <implements interface="collective.quickupload.interfaces.IQuickUploadCapable" />
    <implements interface="plone.app.contenttypes.interfaces.ICollection" />
    <implements interface="Products.PloneMeeting.interfaces.IMeetingBatchActionsMarker" />
    <implements interface="Products.PloneMeeting.interfaces.IMeetingContentBatchActionsMarker" />
  </class>
  <!-- makes the MeetingItem implements IFinderUploadCapable and IQuickUploadCapable
      so user may upload Images into it thru plonefinder -->
  <class class="Products.PloneMeeting.MeetingItem.MeetingItem">
    <implements interface="collective.plonefinder.browser.interfaces.IFinderUploadCapable" />
    <implements interface="collective.quickupload.interfaces.IQuickUploadCapable" />
    <implements interface="Products.PloneMeeting.interfaces.IMeetingItemBatchActionsMarker" />
    <implements interface="Products.PloneMeeting.interfaces.IMeetingContentBatchActionsMarker" />
  </class>
  <!-- makes the meetingadvice implements IFinderUploadCapable and IQuickUploadCapable
      so user may upload Images into it thru plonefinder -->
  <class class="Products.PloneMeeting.content.advice.MeetingAdvice">
    <implements interface="collective.plonefinder.browser.interfaces.IFinderUploadCapable" />
    <implements interface="collective.quickupload.interfaces.IQuickUploadCapable" />
    <implements interface="Products.PloneMeeting.interfaces.IMeetingAdviceBatchActionsMarker" />
    <implements interface="Products.PloneMeeting.interfaces.IMeetingContentBatchActionsMarker" />
  </class>
  <!-- makes the annex ContentCategory and ContentSubcategory added in the configuration
       act like elements of the configuration... -->
  <class class="collective.iconifiedcategory.content.categoryconfiguration.CategoryConfiguration">
    <implements interface="Products.PloneMeeting.interfaces.IConfigElement" />
  </class>
  <class class="collective.iconifiedcategory.content.categorygroup.CategoryGroup">
    <implements interface="Products.PloneMeeting.interfaces.IConfigElement" />
  </class>
  <class class="collective.iconifiedcategory.content.category.Category">
    <implements interface="Products.PloneMeeting.interfaces.IConfigElement" />
  </class>
  <class class="collective.iconifiedcategory.content.subcategory.Subcategory">
    <implements interface="Products.PloneMeeting.interfaces.IConfigElement" />
  </class>
  <class class="Products.PloneMeeting.content.organization.PMOrganization">
    <implements interface="Products.PloneMeeting.interfaces.IConfigElement" />
  </class>
  <class class="Products.PloneMeeting.content.person.PMPerson">
    <implements interface="Products.PloneMeeting.interfaces.IConfigElement" />
  </class>
  <class class="Products.PloneMeeting.content.held_position.PMHeldPosition">
    <implements interface="Products.PloneMeeting.interfaces.IConfigElement" />
  </class>
  <class class="collective.documentgenerator.content.pod_template.ConfigurablePODTemplate">
    <implements interface="Products.PloneMeeting.interfaces.IConfigElement" />
  </class>
  <class class="collective.documentgenerator.content.style_template.StyleTemplate">
    <implements interface="Products.PloneMeeting.interfaces.IConfigElement" />
  </class>
  <class class="plone.app.contenttypes.content.Collection">
    <implements interface="Products.PloneMeeting.interfaces.IConfigElement" />
  </class>
  <!-- Mark some default Plone portal_types as IConfigElement so adding elements
       to a "documents" folder will notify folder modified and invalidate caching -->
  <class class="Products.ATContentTypes.content.document.ATDocument">
    <implements interface="Products.PloneMeeting.interfaces.IPloneElement" />
  </class>
  <class class="plone.app.blob.content.ATBlob">
    <implements interface="Products.PloneMeeting.interfaces.IPloneElement" />
  </class>
  <class class="Products.ATContentTypes.content.folder.ATFolder">
    <implements interface="Products.PloneMeeting.interfaces.IPloneElement" />
  </class>
  <class class="Products.ATContentTypes.content.newsitem.ATNewsItem">
    <implements interface="Products.PloneMeeting.interfaces.IPloneElement" />
  </class>
  <class class="Products.ATContentTypes.content.link.ATLink">
    <implements interface="Products.PloneMeeting.interfaces.IPloneElement" />
  </class>

  <!-- ETag components -->
  <adapter factory=".etags.UserGroups"
           name="usergroups" />
  <adapter factory=".etags.ContextModified"
           name="contextmodified" />
  <adapter factory=".etags.ParentModified"
           name="parentmodified" />
  <adapter factory=".etags.LinkedMeetingModified"
           name="linkedmeetingmodified" />
  <adapter factory=".etags.ConfigModified"
           name="configmodified" />
  <adapter factory=".etags.ToolModified"
           name="toolmodified" />
  <adapter factory=".etags.MessagesViewlet"
           name="messagesviewlet" />

  <include package="z3c.unconfigure" file="meta.zcml" />

  <!-- TAL condition behavior, unconfigure and re-configure for every content to add our extra expr context -->
  <unconfigure package="collective.behavior.talcondition">
    <plone:behavior
        title="TALCondition"
        description="Add a TAL condition field useable to check if content should be available."
        provides=".behavior.ITALCondition"
        for="plone.dexterity.interfaces.IDexterityContent"
        factory=".behavior.TALCondition"
        marker=".interfaces.ITALConditionable" />
  </unconfigure>

  <!-- collective.compoundcriterion, unconfigure negative-personal-labels and negative-previous-index,
       it is overrided as items-with-negative-personal-labels and items-with-negative-previous-index -->
  <unconfigure package="collective.compoundcriterion">
    <adapter
        for="*"
        factory="collective.compoundcriterion.adapters.NegativePreviousIndexValuesAdapter"
        provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
        name="negative-previous-index" />
    <adapter
        zcml:condition="installed ftw.labels"
        for="*"
        factory="collective.compoundcriterion.adapters.NegativePersonalLabelsAdapter"
        provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
        name="negative-personal-labels" />
  </unconfigure>

  <plone:behavior
      title="TALCondition"
      description="Add a TAL condition field useable to check if content should be available."
      provides="collective.behavior.talcondition.behavior.ITALCondition"
      for="plone.dexterity.interfaces.IDexterityContent"
      factory="Products.PloneMeeting.behaviors.overrides.PMTALCondition"
      marker="collective.behavior.talcondition.interfaces.ITALConditionable" />

    <!-- MISSING VOCABULARIES -->
    <!-- type, layer, view, field, vocabulary, widget -->
    <adapter
        for="imio.annex.content.annex.IAnnex
             z3c.form.interfaces.IFormLayer
             zope.interface.Interface
             zope.schema.interfaces.IChoice
             zope.schema.interfaces.IBaseVocabulary
             z3c.form.interfaces.ISelectWidget"
        factory=".adapters.AnnexMissingTermsVocabulary" />

</configure>
