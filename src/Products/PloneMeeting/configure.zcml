<configure xmlns="http://namespaces.zope.org/zope"
           xmlns:browser="http://namespaces.zope.org/browser"
           xmlns:five="http://namespaces.zope.org/five"
           xmlns:i18n="http://namespaces.zope.org/i18n"
           i18n_domain="PloneMeeting">

  <!-- load "imio.pm.locales" first so translations are overrided -->
  <include package="imio.pm.locales"/>
  <include package="communesplone.layout"/>
  <include package="Products.PasswordStrength" />
  <include package="collective.ckeditor"/>
  <include package="collective.documentviewer"/>
  <include package="collective.datagridcolumns"/>
  <include package="collective.iconifieddocumentactions"/>
  <include package="collective.iconifiedcategory"/>
  <include package="collective.js.fancytree"/>
  <include package="collective.js.jqueryui"/>
  <include package="collective.messagesviewlet"/>
  <include package="imio.annex"/>
  <include package="imio.pm.ws"/>
  <include package="imio.dashboard"/>
  <include package="plone.app.dexterity" />
  <include package="plone.directives.form" file="meta.zcml" />
  <include package="plone.directives.form" />
  <include package="plonetheme.imioapps"/>
  <include package="Products.CMFPlacefulWorkflow"/>
  <include package="Products.cron4plone" />
  <include package="Products.DataGridField" />
  <include package=".browser" />
  <include package=".content" />
  <include package=".documentgenerator" />
  <include package=".filters" />

  <include file="columns.zcml" />
  <include file="events.zcml" />
  <include file="profiling.zcml" />
  <include file="vocabularies.zcml" />
  <includeOverrides file="overrides.zcml" />

  <permission id="PloneMeeting.AddAdvice"
              title="PloneMeeting: Add advice"/>
  <permission id="PloneMeeting.AddAnnex"
              title="PloneMeeting: Add annex"/>
  <permission id="PloneMeeting.AddAnnexDecision"
              title="PloneMeeting: Add annexDecision"/>

  <adapter for=".interfaces.IMeetingItem"
           factory=".MeetingItem.MeetingItemWorkflowConditions"
           provides=".interfaces.IMeetingItemWorkflowConditions" />
  <adapter for=".interfaces.IMeetingItem"
           factory=".MeetingItem.MeetingItemWorkflowActions"
           provides=".interfaces.IMeetingItemWorkflowActions" />
  <adapter for=".interfaces.IMeeting"
           factory=".Meeting.MeetingWorkflowConditions"
           provides=".interfaces.IMeetingWorkflowConditions" />
  <adapter for=".interfaces.IMeeting"
           factory=".Meeting.MeetingWorkflowActions"
           provides=".interfaces.IMeetingWorkflowActions" />
  <adapter for="Products.PloneMeeting.interfaces.IMeeting"
           factory=".adapters.PMWfHistoryAdapter"
           name="workflow"
           provides="imio.history.interfaces.IImioWfHistory" />
  <adapter for="Products.PloneMeeting.interfaces.IMeetingItem"
           factory=".adapters.PMWfHistoryAdapter"
           name="workflow"
           provides="imio.history.interfaces.IImioWfHistory" />
  <adapter for="Products.PloneMeeting.content.advice.IMeetingAdvice"
           factory=".adapters.PMWfHistoryAdapter"
           name="workflow"
           provides="imio.history.interfaces.IImioWfHistory" />

  <!-- searches useable as compoundcriterion -->
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.ItemsOfMyGroupsAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-of-my-groups" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.MyItemsTakenOverAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="my-items-taken-over" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.ItemsInCopyAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-in-copy" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.ItemsToValidateOfHighestHierarchicLevelAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-to-validate-of-highest-hierarchic-level" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.ItemsToValidateOfEveryReviewerLevelsAndLowerLevelsAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-to-validate-of-every-reviewer-levels-and-lower-levels" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.ItemsToValidateOfMyReviewerGroupsAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-to-validate-of-my-reviewer-groups" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.ItemsToCorrectAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-to-correct" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.ItemsToCorrectToValidateOfHighestHierarchicLevelAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-to-correct-to-validate-of-highest-hierarchic-level" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.ItemsToCorrectToValidateOfEveryReviewerLevelsAndLowerLevelsAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-to-correct-to-validate-of-every-reviewer-groups" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.ItemsToCorrectToValidateOfMyReviewerGroupsAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-to-correct-to-validate-of-my-reviewer-groups" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.ItemsToAdviceAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-to-advice" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.ItemsToAdviceWithoutDelayAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-to-advice-without-delay" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.ItemsToAdviceWithDelayAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-to-advice-with-delay" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.ItemsToAdviceWithExceededDelayAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="items-to-advice-with-exceeded-delay" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.AdvisedItemsAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="advised-items" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.AdvisedItemsWithDelayAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="advised-items-with-delay" />
  <adapter for="*"
           factory="Products.PloneMeeting.adapters.DecidedItemsAdapter"
           provides="collective.compoundcriterion.interfaces.ICompoundCriterionFilter"
           name="decided-items" />

  <!-- IContentDeletable adapter override for PloneMeeting -->
  <adapter for="imio.annex.content.annex.IAnnex"
           factory=".adapters.AnnexDecisionContentDeletableAdapter"
           provides="imio.actionspanel.interfaces.IContentDeletable" />
  <adapter for="Products.PloneMeeting.Meeting.Meeting"
           factory=".adapters.MeetingContentDeletableAdapter"
           provides="imio.actionspanel.interfaces.IContentDeletable" />
  <adapter for="Products.PloneMeeting.MeetingItem.MeetingItem"
           factory=".adapters.MeetingItemContentDeletableAdapter"
           provides="imio.actionspanel.interfaces.IContentDeletable" />
  <adapter for="Products.PloneMeeting.MeetingFile.MeetingFile"
           factory=".adapters.MeetingFileContentDeletableAdapter"
           provides="imio.actionspanel.interfaces.IContentDeletable" />

  <!-- Indexes -->
  <adapter name="getRawClassifier" factory=".indexes.getRawClassifier" />
  <adapter name="Description" factory=".indexes.Description" />
  <adapter name="hasAnnexesToPrint" factory=".indexes.hasAnnexesToPrint" />
  <adapter name="linkedMeetingDate" factory=".indexes.linkedMeetingDate" />
  <adapter name="linkedMeetingUID" factory=".indexes.linkedMeetingUID" />
  <adapter name="getPreferredMeetingDate" factory=".indexes.getPreferredMeetingDate" />
  <adapter name="getCopyGroups" factory=".indexes.getCopyGroups" />
  <adapter name="getGroupInCharge" factory=".indexes.getGroupInCharge" />
  <adapter name="sentToInfos" factory=".indexes.sentToInfos" />
  <adapter name="templateUsingGroups" factory=".indexes.templateUsingGroups" />
  <adapter name="previous_review_state" factory=".indexes.previous_review_state" />
  <adapter name="title_or_id" factory=".indexes.title_or_id" />
  <adapter name="indexAdvisers" factory=".indexes.indexAdvisers" />
  <adapter name="reviewProcessInfo" factory=".indexes.reviewProcessInfo" />
  <adapter name="sortable_title" factory=".indexes.sortable_title" />
  <adapter name="sendToAuthority" factory=".indexes.sendToAuthority" />
  <adapter name="SearchableText" factory=".indexes.SearchableText" />

  <adapter
    for="imio.annex.content.annex.IAnnex"
    provides="collective.iconifiedcategory.interfaces.IIconifiedInfos"
    factory=".adapters.PMCategorizedObjectInfoAdapter"
    />

  <adapter
    for="Products.PloneMeeting.interfaces.IMeetingContent
         zope.publisher.interfaces.browser.IBrowserRequest
         Products.ZCatalog.interfaces.ICatalogBrain"
    provides="collective.iconifiedcategory.interfaces.IIconifiedContent"
    factory=".adapters.PMCategorizedObjectAdapter"
    />

  <!-- add the blob field to MeetingFile -->
  <adapter name="plone.app.blob.subtypes.file"
           for="Products.PloneMeeting.interfaces.IMeetingFile"
           factory="plone.app.blob.subtypes.file.SchemaExtender" />

  <!-- IPrettyLink -->
  <adapter for="Products.PloneMeeting.interfaces.IMeetingItem"
           factory=".adapters.ItemPrettyLinkAdapter"
           provides="imio.prettylink.interfaces.IPrettyLink" />
  <adapter for="Products.PloneMeeting.interfaces.IMeeting"
           factory=".adapters.MeetingPrettyLinkAdapter"
           provides="imio.prettylink.interfaces.IPrettyLink" />

  <adapter for="*"
           factory=".adapters.IconifiedCategoryConfigAdapter"
           provides="collective.iconifiedcategory.interfaces.IIconifiedCategoryConfig" />

  <adapter for="plone.app.contenttypes.interfaces.IFolder
                imio.annex.content.annex.IAnnex"
           factory=".adapters.IconifiedCategoryGroupAdapter"
           provides="collective.iconifiedcategory.interfaces.IIconifiedCategoryGroup" />
  <adapter for="plone.app.contenttypes.interfaces.IFolder
                Products.PloneMeeting.interfaces.IMeetingItem"
           factory=".adapters.IconifiedCategoryGroupAdapter"
           provides="collective.iconifiedcategory.interfaces.IIconifiedCategoryGroup" />
  <adapter for="plone.app.contenttypes.interfaces.IFolder
                Products.PloneMeeting.interfaces.IMeeting"
           factory=".adapters.IconifiedCategoryGroupAdapter"
           provides="collective.iconifiedcategory.interfaces.IIconifiedCategoryGroup" />
  <adapter for="plone.app.contenttypes.interfaces.IFolder
                Products.PloneMeeting.content.advice.IMeetingAdvice"
           factory=".adapters.IconifiedCategoryGroupAdapter"
           provides="collective.iconifiedcategory.interfaces.IIconifiedCategoryGroup" />


  <five:deprecatedManageAddDelete class=".MeetingItem.MeetingItem" />
  <five:deprecatedManageAddDelete class=".Meeting.Meeting" />
  <five:deprecatedManageAddDelete class=".MeetingFile.MeetingFile" />
  <five:deprecatedManageAddDelete class=".MeetingFileType.MeetingFileType" />
  <five:deprecatedManageAddDelete class=".MeetingCategory.MeetingCategory" />
  <five:deprecatedManageAddDelete class=".MeetingGroup.MeetingGroup" />
  <five:deprecatedManageAddDelete class=".MeetingConfig.MeetingConfig" />
  <five:deprecatedManageAddDelete class=".MeetingUser.MeetingUser" />
  <five:deprecatedManageAddDelete class=".PodTemplate.PodTemplate" />
  <five:deprecatedManageAddDelete class=".ToolPloneMeeting.ToolPloneMeeting" />

  <include file="profiles.zcml" />

  <!-- Make ToolPloneMeeting and MeetingConfig types portlet-aware -->
  <class class="Products.PloneMeeting.ToolPloneMeeting.ToolPloneMeeting">
    <implements interface="plone.portlets.interfaces.ILocalPortletAssignable" />
  </class>
  <class class="Products.PloneMeeting.MeetingConfig.MeetingConfig">
    <implements interface="plone.portlets.interfaces.ILocalPortletAssignable" />
    <implements interface="Products.Archetypes.interfaces.IMultiPageSchema" />
  </class>
  <!-- Make Meeting behave like a Collection to be faceted navigable -->
  <class class="Products.PloneMeeting.Meeting.Meeting">
    <implements interface="eea.facetednavigation.interfaces.IPossibleFacetedNavigable" />
    <implements interface="plone.app.collection.interfaces.ICollection" />
    <implements interface="collective.plonefinder.browser.interfaces.IFinderUploadCapable" />
    <implements interface="collective.quickupload.interfaces.IQuickUploadCapable" />
  </class>
  <!-- makes the MeetingFile implements IFileContent so every views of collective.documentviewer are also available... -->
  <class class="Products.PloneMeeting.MeetingFile.MeetingFile">
    <implements interface="Products.ATContentTypes.interfaces.file.IFileContent" />
  </class>
  <!-- makes the MeetingItem implements IFinderUploadCapable and IQuickUploadCapable
      so user may upload Images into it thru plonefinder -->
  <class class="Products.PloneMeeting.MeetingItem.MeetingItem">
    <implements interface="collective.plonefinder.browser.interfaces.IFinderUploadCapable" />
    <implements interface="collective.quickupload.interfaces.IQuickUploadCapable" />
  </class>
  <!-- makes the meetingadvice implements IFinderUploadCapable and IQuickUploadCapable
      so user may upload Images into it thru plonefinder -->
  <class class="Products.PloneMeeting.content.advice.MeetingAdvice">
    <implements interface="collective.plonefinder.browser.interfaces.IFinderUploadCapable" />
    <implements interface="collective.quickupload.interfaces.IQuickUploadCapable" />
  </class>
  <!-- makes the annex ContentCategory and ContentSubcategory added in the configuration
       act like elements of the configuration... -->
  <class class="collective.iconifiedcategory.content.categorygroup.CategoryGroup">
    <implements interface="Products.PloneMeeting.interfaces.IConfigElement" />
  </class>
  <class class="collective.iconifiedcategory.content.category.Category">
    <implements interface="Products.PloneMeeting.interfaces.IConfigElement" />
  </class>
  <class class="collective.iconifiedcategory.content.subcategory.Subcategory">
    <implements interface="Products.PloneMeeting.interfaces.IConfigElement" />
  </class>

  <!-- to be removed after migration to 4 -->
  <adapter for="OFS.interfaces.IItem"
           factory=".adapters.AnnexableAdapter"
           provides=".interfaces.IAnnexable" />

</configure>
