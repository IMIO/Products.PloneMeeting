<html xmlns="http://www.w3.org/1999/xhtml"
      xml:lang="en"
      lang="en"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      metal:use-macro="here/main_template/macros/master"
      i18n:domain="PloneMeeting">

  <body >
  <metal:title fill-slot="content-title"
               tal:define="itemNumber python: context.getItemNumber(relativeTo='meeting')">
   <metal:header use-macro="here/@@pm-macros/itemHeader"/>
  </metal:title>
  <metal:description fill-slot="content-description">
   <tal:comment replace="nothing">Just hide the description as shown by default by Plone</tal:comment>
  </metal:description>

  <metal:fill fill-slot="content-core">
    <metal:main_macro define-macro="body"
                      tal:define="tool python: context.portal_plonemeeting;
                                  member tool/getUser;
                                  dummy context/checkPrivacyViewable;
                                  meetingConfig python:tool.getMeetingConfig(context);
                                  meeting context/getMeeting;
                                  showColors tool/showColorsForUser;
                                  usedAttrs meetingConfig/getUsedItemAttributes;
                                  usedMeetingAttributes meetingConfig/getUsedMeetingAttributes;
                                  bilingual python: 'secondLanguage' in tool.getModelAdaptations();
                                  portal context/plone_portal_state/portal;">

  <script language="javascript"
    tal:content="python: 'ploneEditor = \'%s\';' % (member.getProperty('wysiwyg_editor') or here.portal_properties.site_properties.default_editor)">
  </script>

    <tal:comment replace="nothing">Form used for going to meetingitem_view for an item
        whose number is given by the user.</tal:comment>

    <form name="formGotoItem" tal:attributes="action python: context.absolute_url_path() + '/object_goto'">
        <input type="hidden" name="objectId"/>
        <input type="hidden" name="meetingUid"/>
        <input type="hidden" name="idType" value="number"/>
    </form>

    <tal:comment replace="nothing">Show navigation between items of the same meeting</tal:comment>
    <tal:itemNavigation tal:condition="python: meeting">
      <metal:itemNavigation  use-macro="context/hs_navigate/macros/item"/>
    </tal:itemNavigation>

    <table width="100%">
      <tr valign="top">
        <td width="50%">

        <tal:comment replace="nothing">Classifier</tal:comment>
        <div class="discreet"
             tal:condition="python: 'classifier' in usedAttrs"
             tal:define="classifier context/getClassifier">
          <i><span i18n:translate="PloneMeeting_label_classifier"></span></i>:&nbsp;&nbsp;
             <span tal:condition="classifier" tal:content="classifier/Title">-</span>
             <span tal:condition="not: classifier">-</span>
        </div>


        <tal:comment replace="nothing">Category or proposing group (if group is used as category)</tal:comment>
        <div class="discreet" tal:define="cat python: context.getCategory(True)" tal:condition="python: cat">
          <i><span tal:condition="not: meetingConfig/getUseGroupsAsCategories"
                   i18n:translate="MeetingCategory"></span>
             <span tal:condition="meetingConfig/getUseGroupsAsCategories"
                   i18n:translate="PloneMeeting_label_proposingGroup"></span></i>:&nbsp;&nbsp;
             <span tal:content="python: cat.getName()"></span>
        </div>

        <tal:comment replace="nothing">Proposing group (if group is not used as category),
                                       could be empty in the case of a template item.</tal:comment>
        <div class="discreet" tal:condition="python: not meetingConfig.getUseGroupsAsCategories()">
          <i><span i18n:translate="PloneMeeting_label_proposingGroup"></span></i>:&nbsp;&nbsp;
             <span tal:condition="context/getProposingGroup"
                   tal:content="python: getattr(tool, context.getProposingGroup()).Title()"></span>
             <span tal:condition="not: context/getProposingGroup">-</span>
        </div>

        <tal:comment replace="nothing">Associated groups</tal:comment>
        <div class="discreet" tal:condition="python: 'associatedGroups' in usedAttrs"
                              tal:define="associatedGroups context/getAssociatedGroups;">
          <i><span i18n:translate="PloneMeeting_label_associatedGroups"></span></i>:&nbsp;&nbsp;
             <tal:displayAssociatedGroups condition="associatedGroups">
                <span metal:use-macro="python: here.widget('associatedGroups', mode='view')" />
             </tal:displayAssociatedGroups>
             <span tal:condition="not: associatedGroups">-</span>
        </div>

        <tal:comment replace="nothing">Copy groups for this item</tal:comment>
        <div class="discreet" tal:condition="python: context.isCopiesEnabled()"
                              tal:define="copyGroups context/getCopyGroups;">
          <i><span i18n:translate="PloneMeeting_label_copyGroups"></span></i>:&nbsp;&nbsp;
             <tal:displayCopyGroups condition="copyGroups">
                <span metal:use-macro="python: here.widget('copyGroups', mode='view')" />
             </tal:displayCopyGroups>
             <span tal:condition="not: copyGroups">-</span>
        </div>

        <tal:comment replace="nothing">Item assembly</tal:comment>
        <div class="discreet"
             tal:condition="python: ('itemAssembly' in usedAttrs) and ('assembly' in usedMeetingAttributes) and meeting">
          <tal:defines define="redefinedItemAssembly python: context.getItemAssembly(real=True);
                               mayQuickEdit python: context.mayQuickEdit('itemAssembly');
                               class_if_highlighted python: redefinedItemAssembly and 'highlightRedefinedValue' or '';
                               class_to_use python: mayQuickEdit and (class_if_highlighted and class_if_highlighted + ' itemAssemblyEditable' or 'itemAssemblyEditable') or class_if_highlighted">
          <div tal:attributes="class class_to_use"><i>
              <a tal:condition="mayQuickEdit" href="manage_item_assembly_form" class="link-overlay-pm">
              <span i18n:translate="item_assembly"></span>
              </a>
              <span tal:condition="not: mayQuickEdit"
                    tal:attributes="class class_to_use"
                    i18n:translate="item_assembly"></span>
          </i>:&nbsp;&nbsp;
          </div>
          <div tal:content="structure context/getStrikedItemAssembly"/>
          </tal:defines>
        </div>

        <tal:comment replace="nothing">Item keywords</tal:comment>
        <div class="discreet" tal:condition="python: 'itemKeywords' in usedAttrs">
          <i><span i18n:translate="PloneMeeting_label_itemKeywords"></span></i>:&nbsp;&nbsp;
             <span tal:content="context/itemKeywords"></span>
        </div>

        <tal:comment replace="nothing">Item tags</tal:comment>
        <div class="discreet" tal:condition="python: 'itemTags' in usedAttrs">
          <i><span i18n:translate="PloneMeeting_label_itemTags"></span></i>:&nbsp;&nbsp;
             <span tal:content="python: ', '.join(context.getItemTags())"></span>
        </div>
        <tal:comment replace="nothing">Predecessor</tal:comment>
        <table class="no-style-table"
               tal:define="predecessors python: context.adapted().getPredecessors()"
               tal:condition="predecessors">
          <tr>
            <td style="vertical-align: top;">
              <div class="discreet">
              <i><span i18n:translate="PloneMeeting_label_predecessor"></span></i>:&nbsp;&nbsp;
              </div>
            </td>
            <td><tal:predecessors tal:repeat="predecessor predecessors">
                 <tal:predecessor replace="structure predecessor" /><br />
                </tal:predecessors>
            </td>
          </tr>
        </table>
        <div class="discreet"
             tal:condition="python: 'itemIsSigned' in usedAttrs">
          <i><span i18n:translate="PloneMeeting_label_itemIsSigned"></span></i>:&nbsp;&nbsp;
          <tal:defines define="meetingItem python: context;
                               ajaxEdit python: True;">
           <metal:itemIsSigned use-macro="here/@@pm-macros/itemIsSigned" />
          </tal:defines>
        </div>
        </td>
        <td width="50%" align="right">
        <tal:comment replace="nothing">Preferred meeting</tal:comment>
        <div class="discreet">
          <i><span i18n:translate="PloneMeeting_label_preferredMeeting"></span></i>:&nbsp;&nbsp;
            <span tal:define="meetings python:here.portal_catalog(UID=here.getPreferredMeeting())">
            <span tal:condition="meetings">
                <tal:block define="meeting python:meetings[0];
                                   mayView python: tool.checkMayView(meeting)">
                <a tal:condition="mayView" tal:attributes="href meeting/getURL"
                   tal:content="python: tool.formatDate(meeting, prefixed=True, withHour=True)"></a>
                <span tal:condition="not: mayView" tal:content="meeting/Title">
                </span>
                </tal:block>
            </span>
            <span tal:condition="not: meetings">-
            </span>
          </span>
        </div>

        <tal:comment replace="nothing">Meeting where this item is presented</tal:comment>
        <div class="discreet">
          <i><span i18n:translate="presented_in_meeting">Presented in meeting</span></i>:&nbsp;&nbsp;
          <tal:hasMeeting condition="python: meeting">
            <tal:block define="mayView python: tool.checkMayView(meeting)">
              <a tal:condition="mayView"
                 tal:attributes="href meeting/absolute_url"
                 tal:content="python: tool.formatDate(meeting.getDate(), prefixed=True, withHour=True)"></a>
              <span tal:condition="not: mayView" tal:content="python: context.restrictedTraverse('@@pm_unrestricted_methods').getLinkedMeetingTitle()"></span>
            </tal:block>
          </tal:hasMeeting>
          <span tal:condition="python: not meeting">-</span>
        </div>

        <tal:comment replace="nothing">Other MeetingConfigs Clonable To</tal:comment>
        <div class="discreet"
             tal:condition="python: otherMCs or context.isClonableToOtherMeetingConfigs()"
             tal:define="otherMCs context/getOtherMeetingConfigsClonableTo">
          <i><span i18n:translate="PloneMeeting_label_otherMeetingConfigsClonableTo"></span></i>:&nbsp;&nbsp;
             <tal:displayOtherMeetingConfigsClonableTo tal:condition="otherMCs">
                <span metal:use-macro="python: here.widget('otherMeetingConfigsClonableTo', mode='view')" />
             </tal:displayOtherMeetingConfigsClonableTo>
             <span tal:condition="not: otherMCs">-</span>
        </div>

        <tal:comment replace="nothing">Privacy</tal:comment>
        <div class="discreet"
             tal:define="privacy context/getPrivacy"
             tal:condition="python: ('privacy' in usedAttrs) and privacy">
          <i class="#" tal:attributes="class string:item_privacy_${privacy}" tal:content="python: 'ip_%s' % privacy" i18n:translate=""></i>
        </div>
        <tal:comment replace="nothing">Oral question or item</tal:comment>
        <div class="discreet" tal:condition="python: 'oralQuestion' in usedAttrs">
         <tal:defines define="oq context/getOralQuestion">
          <tal:oral_question condition="oq">
           <i><img src="#" tal:attributes="src string:${portal_url}/oralQuestion.png">&nbsp;<span i18n:translate="this_item_is_an_oral_question">This item is an oral question</span></i>
          </tal:oral_question>
          <tal:not_oral_question condition="not: oq">
           <i><span i18n:translate="this_item_is_not_an_oral_question">This item is not an oral question</span></i>
          </tal:not_oral_question>
         </tal:defines>
        </div>
        <tal:comment replace="nothing">Item initiator</tal:comment>
        <div class="discreet" tal:condition="python: 'itemInitiator' in usedAttrs">
         <tal:defines define="itemInitiator context/getItemInitiator">
          <i><span i18n:translate="PloneMeeting_label_itemInitiator"></span></i>:&nbsp;&nbsp;
             <tal:block condition="itemInitiator">
              <span metal:use-macro="python: here.widget('itemInitiator', mode='view')" />
             </tal:block>
             <span tal:condition="not: itemInitiator">-</span>
         </tal:defines>
        </div>
        <tal:comment replace="nothing">Item signatures</tal:comment>
        <div class="discreet"
             tal:condition="python: meeting and ('signatures' in usedMeetingAttributes)">
          <tal:defines define="redefinedItemSignatures python: context.getItemSignatures(real=True);
                               mayQuickEdit python: context.mayQuickEdit('itemSignatures');
                               class_if_highlighted python: redefinedItemSignatures and 'highlightRedefinedValue' or '';
                               class_to_use python: mayQuickEdit and (class_if_highlighted and class_if_highlighted + ' itemSignaturesEditable' or 'itemSignaturesEditable') or class_if_highlighted">
          <div tal:attributes="class class_to_use"><i>
              <a tal:condition="mayQuickEdit" href="manage_item_signatures_form" class="link-overlay-pm">
              <span i18n:translate="meeting_signatures"></span>
              </a>
              <span tal:condition="not: mayQuickEdit"
                    tal:attributes="class class_to_use"
                    i18n:translate="meeting_signatures"></span>
          </i>:&nbsp;&nbsp;
          </div>
          <div tal:replace="structure python: context.getItemSignatures().replace('\n', '<br />')"/>
          </tal:defines>
        </div>
        </td>
      </tr>
    </table>

    <tal:comment replace="nothing">People (item attendees, signers and votes)</tal:comment>
    <metal:people use-macro="here/@@pm-macros/itemPeople"/>

    <tal:comment replace="nothing">Description</tal:comment>
    <tal:field define="fieldName python: 'description'; ajaxEdit python:True">
       <metal:f use-macro="context/@@pm-macros/viewContentField"/>
    </tal:field>
    <tal:comment replace="nothing">Detailed description</tal:comment>
    <tal:field define="fieldName python: 'detailedDescription'; ajaxEdit python:True">
       <metal:f use-macro="context/@@pm-macros/viewContentField"/>
    </tal:field>

    <tal:comment replace="nothing">Budgetary informations</tal:comment>
    <tal:field define="fieldName python: 'budgetInfos'; ajaxEdit python:True">
       <metal:f use-macro="context/@@pm-macros/viewContentField"/>
    </tal:field>

    <tal:comment replace="nothing">Motivation</tal:comment>
    <tal:field define="fieldName python: 'motivation'; ajaxEdit python:True">
       <metal:f use-macro="context/@@pm-macros/viewContentField"/>
    </tal:field>

    <tal:comment replace="nothing">Decision</tal:comment>
    <tal:field define="fieldName python: 'decision'; ajaxEdit python:True">
       <metal:f use-macro="context/@@pm-macros/viewContentField"/>
    </tal:field>

    <tal:comment replace="nothing">Annexes and advices</tal:comment>
    <a name="adviceAndAnnexes"></a>
    <table width="100%" cellpadding="1" cellspacing="1"
           tal:define="hasAnnexes python: context.hasAnnexesWhere(decisionRelated=False);
                       hasAnnexesDecision python: context.hasAnnexesWhere(decisionRelated=True);
                       hasAdvices python: meetingConfig.getUseAdvices() and context.needsAdvices()"
           tal:condition="python: hasAnnexes or hasAnnexesDecision or hasAdvices">
     <tr style="vertical-align: top;">
      <td class="itemAnnexesCell" width="50%" tal:condition="python: hasAnnexes or hasAnnexesDecision">
       <fieldset style="margin: 0;">
        <legend i18n:translate="existing_annexes">Annexes</legend>
        <table class="no-style-table" cellpadding="0" cellspacing="0">
         <tr tal:define="obj python: context">
           <td><metal:annexes use-macro="obj/@@annexes-macros/annexesIcons"/></td>
           <td tal:define="decisionRelated python:True"
               tal:condition="python: member.has_permission('PloneMeeting: Read decision annex', context) and hasAnnexesDecision">
             <metal:annexes use-macro="obj/@@annexes-macros/annexesIcons"/>
           </td>
         </tr>
        </table>
       </fieldset>
      </td>
      <td class="itemAdvicesAloneCell" width="50%" tal:condition="python: not (hasAnnexes or hasAnnexesDecision) and hasAdvices">
       <tal:comment replace="nothing">
         Display an empty panel of annexes. Else, advices popup menus will go out of the screen.
       </tal:comment>
       <fieldset style="margin: 0;">
        <legend i18n:translate="existing_annexes">Annexes</legend>
        <div i18n:translate="no_annexes" class="discreet">No annexes</div>
       </fieldset>
      </td>
      <tal:comment replace="nothing">Advices</tal:comment>
      <td class="itemAdvicesCell" width="50%" tal:condition="hasAdvices">
       <fieldset style="margin: 0;" tal:define="meetingItem python: context">
        <legend i18n:translate="PloneMeeting_label_advices">Advices</legend>
        <metal:advices use-macro="here/@@advices-macros/advicesIcons"/>
       </fieldset>
      </td>
     </tr>
    </table>

    <tal:comment replace="nothing">Observations</tal:comment>
    <tal:field define="fieldName python: 'observations'; ajaxEdit python:True">
       <metal:f use-macro="context/@@pm-macros/viewContentField"/>
    </tal:field>

    <tal:comment replace="nothing">Fields that appear only if the item is defined in a configuration</tal:comment>
    <tal:itemInConfig condition="context/isDefinedInTool">
      <b><span i18n:translate="PloneMeeting_label_usages" />&nbsp:</b>
      <ul><li tal:repeat="usage context/getUsages" tal:content="usage" i18n:translate=""></li></ul><br />

      <tal:templateUsingGroups condition="python: 'as_template_item' in context.getUsages()">
        <b><span i18n:translate="PloneMeeting_label_templateUsingGroups" />&nbsp:</b><br />
        <span metal:use-macro="python: here.widget('templateUsingGroups', mode='view')" /><p>&nbsp;</p>
      </tal:templateUsingGroups>

      <tal:transitionsForRecurring condition="python: 'as_recurring_item' in context.getUsages()">
        <b><span i18n:translate="PloneMeeting_label_meetingTransitionInsertingMe" />&nbsp:</b><br />
        <span metal:use-macro="python: here.widget('meetingTransitionInsertingMe', mode='view')" /><p>&nbsp;</p>
      </tal:transitionsForRecurring>

      <a tal:define="config python: context.getParentNode().getParentNode()"
         tal:attributes="href python: config.absolute_url() + '?pageName=data#recItems'" i18n:translate="back"></a>
    </tal:itemInConfig>

    <tal:comment replace="nothing">Tasks</tal:comment>
    <tal:tasks condition="meetingConfig/getTasksMacro">
    <span tal:define="tasksMacro python: path(meetingConfig.getTasksMacro() + '|nothing')"
          tal:condition="python: tasksMacro and context.adapted().mayBeLinkedToTasks() and (member.has_role('TaskManager') or member.has_role('Owner', context))">
      <br/>
      <span metal:use-macro="tasksMacro"></span>
    </span>
    </tal:tasks>

    <tal:comment replace="nothing">Remember in session when this item was last accessed</tal:comment>
    <span tal:define="dummy python: tool.rememberAccess(context.UID())"></span>


       </metal:main_macro>
    </metal:fill>
  </body>
</html>
