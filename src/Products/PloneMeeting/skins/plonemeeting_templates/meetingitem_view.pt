<html xmlns="http://www.w3.org/1999/xhtml"
      xml:lang="en"
      lang="en"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      metal:use-macro="here/main_template/macros/master"
      i18n:domain="PloneMeeting">

  <body>
  <metal:title fill-slot="content-title">
   <metal:header use-macro="here/@@pm-macros/itemHeader"/>
  </metal:title>
  <metal:description fill-slot="content-description">
   <tal:comment replace="nothing">Just hide the description as shown by default by Plone</tal:comment>
  </metal:description>

  <metal:fill fill-slot="content-core">
    <metal:body_macro define-macro="body"
                      tal:define="tool python: context.portal_plonemeeting;
                                  member tool/getUser;
                                  dummy context/checkPrivacyViewable;
                                  meetingConfig python:tool.getMeetingConfig(context);
                                  meeting context/getMeeting;
                                  usedAttrs meetingConfig/getUsedItemAttributes;
                                  usedMeetingAttributes meetingConfig/getUsedMeetingAttributes;
                                  bilingual python: 'secondLanguage' in tool.getModelAdaptations();
                                  portal context/plone_portal_state/portal;">

    <script language="javascript"
            tal:content="python: 'ploneEditor = \'%s\';' % (member.getProperty('wysiwyg_editor') or here.portal_properties.site_properties.default_editor)">
    </script>

    <tal:comment replace="nothing">Form used for going to meetingitem_view for an item
        whose number is given by the user.</tal:comment>

    <form name="formGotoItem" tal:attributes="action python: context.absolute_url_path() + '/object_goto'">
        <input type="hidden" name="uid"/>
    </form>

    <tal:comment replace="nothing">Show navigation between items of the same meeting</tal:comment>
    <tal:itemNavigation tal:condition="python: meeting">
      <tal:itemNavigation replace="structure context/@@item-navigation-widget" />
    </tal:itemNavigation>

    <table width="100%">
      <tr valign="top">
        <td width="50%" style="padding-right: 0.5em;">

            <tal:comment replace="nothing">Classifier</tal:comment>
            <div class="discreet"
                 tal:condition="python: 'classifier' in usedAttrs"
                 tal:define="classifier context/getClassifier">
                <span class="item_attribute_label"
                      i18n:translate="PloneMeeting_label_classifier"></span>:&nbsp;&nbsp;
                <span tal:condition="classifier" tal:content="classifier/Title">-</span>
                <span tal:condition="not: classifier">-</span>
            </div>

            <tal:comment replace="nothing">Category or proposing group (if group is used as category)</tal:comment>
            <div class="discreet" tal:define="cat python: context.getCategory(True)" tal:condition="python: cat">
                <span class="item_attribute_label"
                      tal:condition="not: meetingConfig/getUseGroupsAsCategories"
                      i18n:translate="MeetingCategory"></span>
                <span class="item_attribute_label"
                      tal:condition="meetingConfig/getUseGroupsAsCategories"
                      i18n:translate="PloneMeeting_label_proposingGroup"></span>:&nbsp;&nbsp;
                <span tal:content="python: cat.getName()"></span>
            </div>

            <tal:comment replace="nothing">Proposing group (if group is not used as category),
                                           could be empty in the case of a template item.</tal:comment>
            <div class="discreet" tal:condition="python: not meetingConfig.getUseGroupsAsCategories()">
                <span class="item_attribute_label"
                      i18n:translate="PloneMeeting_label_proposingGroup"></span>:&nbsp;&nbsp;
                <span tal:condition="context/getProposingGroup"
                      tal:content="python: getattr(tool, context.getProposingGroup()).Title()"></span>
                <span tal:condition="not: context/getProposingGroup">-</span>
            </div>

            <tal:comment replace="nothing">Associated groups</tal:comment>
            <div class="discreet" tal:condition="python: 'associatedGroups' in usedAttrs"
                                  tal:define="associatedGroups context/getAssociatedGroups;">
                <span class="item_attribute_label"
                      i18n:translate="PloneMeeting_label_associatedGroups"></span>:&nbsp;&nbsp;
                <tal:displayAssociatedGroups condition="associatedGroups">
                    <span metal:use-macro="python: here.widget('associatedGroups', mode='view')" />
                </tal:displayAssociatedGroups>
                <span tal:condition="not: associatedGroups">-</span>
            </div>

            <tal:comment replace="nothing">Copy groups for this item</tal:comment>
            <div class="discreet" tal:condition="python: context.isCopiesEnabled()"
                                  tal:define="copyGroups context/getCopyGroups;">
                <span class="item_attribute_label"
                      i18n:translate="PloneMeeting_label_copyGroups"></span>:&nbsp;&nbsp;
                <tal:displayCopyGroups condition="copyGroups">
                    <span metal:use-macro="python: here.widget('copyGroups', mode='view')" />
                </tal:displayCopyGroups>
                <span tal:condition="not: copyGroups">-</span>
            </div>

            <tal:comment replace="nothing">Item assembly</tal:comment>
            <div class="discreet"
                 tal:condition="python: ('itemAssembly' in usedAttrs) and ('assembly' in usedMeetingAttributes) and meeting">
                <tal:defines define="redefinedItemAssemblies python: context.redefinedItemAssemblies(usedMeetingAttributes);
                                     mayQuickEdit python: context.mayQuickEdit('itemAssembly', bypassWritePermissionCheck=True);
                                     class_if_highlighted python: redefinedItemAssemblies and 'highlightValue' or '';
                                     class_to_use python: mayQuickEdit and (class_if_highlighted and class_if_highlighted + ' collapsibleHeader' or ' collapsibleHeader') or class_if_highlighted + ' collapsibleHeader'">
                    <dl id="itemAssembly"
                        class="collapsible inline collapsedOnLoad">
                        <dt tal:attributes="class class_to_use" style="font-size: 100%;">
                            <span i18n:translate="item_assembly" class="item_attribute_label">
                                Item assembly
                            </span>
                            <a tal:condition="mayQuickEdit" href="manage_item_assembly_form" class="link-overlay-pm">
                                <img src="edit.gif"
                                     tal:attributes="src string:${portal_url}/edit.gif" />
                            </a>
                        </dt>
                        <dd class="collapsibleContent">
                            <div>
                                <tal:comment replace="nothing">Display a label 'Attendees' if we use item excused and absents,
                                                               if only using 'assembly', the entire information is in this single field
                                                               where absents are striked.</tal:comment>
                                <tal:displayAssemblyLabel condition="python: 'assemblyExcused' in usedMeetingAttributes or 'assemblyAbsents' in usedMeetingAttributes">
                                    <span class="item_attribute_label"
                                          tal:attributes="class python: 'assembly' in redefinedItemAssemblies and 'item_attribute_label highlightValue' or 'item_attribute_label'"
                                          i18n:translate="attendees_for_item"></span>:&nbsp;&nbsp;
                                </tal:displayAssemblyLabel>
                                <span tal:replace="structure python: context.getStrikedItemAssembly() or '-'">Assembly excused</span>
                            </div>
                            <div tal:condition="python: 'assemblyExcused' in usedMeetingAttributes">
                                <span class="item_attribute_label"
                                      tal:attributes="class python: 'assemblyExcused' in redefinedItemAssemblies and 'item_attribute_label highlightValue' or 'item_attribute_label'"
                                      i18n:translate="PloneMeeting_label_itemAssemblyExcused"></span>:&nbsp;&nbsp;
                                <span tal:replace="structure python: context.getItemAssemblyExcused() or '-'">Assembly excused</span>
                            </div>
                            <div tal:condition="python: 'assemblyAbsents' in usedMeetingAttributes">
                                <span class="item_attribute_label"
                                      tal:attributes="class python: 'assemblyAbsents' in redefinedItemAssemblies and 'item_attribute_label highlightValue' or 'item_attribute_label'"
                                      i18n:translate="PloneMeeting_label_itemAssemblyAbsents"></span>:&nbsp;&nbsp;
                                <span tal:replace="structure python: context.getItemAssemblyAbsents() or '-'">Assembly absents</span>
                            </div>
                        </dd>
                    </dl>
                </tal:defines>
            </div>

            <tal:comment replace="nothing">Item keywords</tal:comment>
            <div class="discreet" tal:condition="python: 'itemKeywords' in usedAttrs">
                <span class="item_attribute_label"
                      i18n:translate="PloneMeeting_label_itemKeywords"></span>:&nbsp;&nbsp;
                <span tal:content="context/itemKeywords"></span>
            </div>

            <tal:comment replace="nothing">Item tags</tal:comment>
            <div class="discreet" tal:condition="python: 'itemTags' in usedAttrs">
                <span class="item_attribute_label"
                      i18n:translate="PloneMeeting_label_itemTags"></span>:&nbsp;&nbsp;
                <span tal:content="python: ', '.join(context.getItemTags())"></span>
            </div>

            <tal:comment replace="nothing">Linked items</tal:comment>
            <div class="discreet">
                <tal:defines define="predecessors python: context.adapted().getPredecessors();
                                     linkedItems context/getManuallyLinkedItems;
                                     showManuallyLinkedItems python: 'manuallyLinkedItems' in usedAttrs or linkedItems;
                                     class_to_use python: (predecessors or linkedItems) and 'item_attribute_label highlightValue' or 'item_attribute_label';">
                    <dl id="linkedItems"
                        class="collapsible inline collapsedOnLoad">
                        <dt class="collapsibleHeader"
                            style="font-size: 100%;">
                            <span tal:condition="showManuallyLinkedItems"
                                  class="item_attribute_label"
                                  tal:attributes="class class_to_use"
                                  i18n:translate="linked_items_with_manually_linked_items">
                                Linked items, <span i18n:name="auto_linked_items" tal:content="python: len(predecessors)">4</span> automatically and <span i18n:name="manually_linked_items" tal:content="python: len(linkedItems)">0</span> manually
                            </span>
                            <span tal:condition="not:showManuallyLinkedItems"
                                  class="item_attribute_label"
                                  tal:attributes="class class_to_use"
                                  i18n:translate="linked_items">
                                Linked items (<span i18n:name="auto_linked_items" tal:content="python: len(predecessors)">4</span>)
                            </span>
                        </dt>
                        <dd class="collapsibleContent">
                              <span class="item_attribute_label" i18n:translate="auto_linked_items">Automatically linked items</span>:&nbsp;&nbsp;
                              <ul class="item-predecessors"
                                  tal:condition="predecessors">
                                  <li tal:repeat="predecessor predecessors">
                                      <tal:predecessor replace="structure python: context.displayLinkedItem(predecessor)" />
                                  </li>
                              </ul>
                              <span tal:condition="not: predecessors">-</span>
                              <tal:manuallyLinkedItems condition="showManuallyLinkedItems">
                                    <p></p>
                                    <span class="item_attribute_label" i18n:translate="PloneMeeting_label_manuallyLinkedItems">Manually linked items</span>:&nbsp;&nbsp;
                                    <ul class="item-linkeditems"
                                        tal:condition="linkedItems">
                                        <li tal:repeat="item linkedItems">
                                            <tal:linkedItem replace="structure python: context.displayLinkedItem(item)" />
                                        </li>
                                    </ul>
                                    <span tal:condition="not: linkedItems">-</span>
                              </tal:manuallyLinkedItems>
                        </dd>
                    </dl>
                </tal:defines>
            </div><br />

            <div class="discreet"
                 tal:condition="python: 'itemIsSigned' in usedAttrs">
              <span class="item_attribute_label"
                    i18n:translate="PloneMeeting_label_itemIsSigned"></span>:&nbsp;&nbsp;
                <tal:itemIsSigned replace="structure context/@@item-is-signed" />
            </div>
            <div class="discreet"
                 tal:condition="python: 'takenOverBy' in usedAttrs">
              <span class="item_attribute_label"
                    i18n:translate="PloneMeeting_label_takenOverBy"></span>:&nbsp;&nbsp;
              <tal:defines define="meetingItem python: context;
                                   ajaxEdit python: True;">
               <metal:itemIsSigned use-macro="here/@@pm-macros/takenOverBy" />
              </tal:defines>
            </div>
            <tal:comment replace="nothing">Item emergency</tal:comment>
            <div class="discreet" tal:condition="python: 'emergency' in usedAttrs">
                <span class="item_attribute_label"
                      i18n:translate="PloneMeeting_label_emergency"></span>:&nbsp;&nbsp;
                <tal:itemEmergency replace="structure here/@@item-emergency/index" />
            </div>
            <div class="discreet" tal:condition="python: 'completeness' in usedAttrs">
                <span class="item_attribute_label"
                      i18n:translate="PloneMeeting_label_completeness"></span>:&nbsp;&nbsp;
                <tal:itemCompleteness replace="structure here/@@item-completeness/index" />
            </div>
        </td>
        <td width="50%" align="right">
            <tal:comment replace="nothing">Preferred meeting</tal:comment>
            <div class="discreet">
                <span class="item_attribute_label" i18n:translate="PloneMeeting_label_preferredMeeting"></span>:&nbsp;&nbsp;
                <span tal:define="meetings python:here.portal_catalog(UID=here.getPreferredMeeting())">
                <span tal:condition="meetings">
                    <tal:block define="meeting python:meetings[0];">
                      <tal:link define="contentValue python: tool.formatMeetingDate(meeting, prefixed=True, withHour=True)"
                                tal:replace="structure python: tool.getColoredLink(meeting, contentValue=contentValue)">
                      </tal:link>
                    </tal:block>
                </span>
                <span tal:condition="not: meetings">-
                </span>
              </span>
            </div>

            <tal:comment replace="nothing">Meeting where this item is presented</tal:comment>
            <div class="discreet">
              <span class="item_attribute_label"
                    i18n:translate="presented_in_meeting">Presented in meeting</span>:&nbsp;&nbsp;
              <tal:hasMeeting condition="python: meeting">
                  <tal:link define="contentValue python: tool.formatMeetingDate(meeting, prefixed=True, withHour=True)"
                            tal:replace="structure python: tool.getColoredLink(meeting, contentValue=contentValue)">
                  </tal:link>
              </tal:hasMeeting>
              <span tal:condition="python: not meeting">-</span>
            </div>

            <tal:comment replace="nothing">List type</tal:comment>
            <div class="discreet" tal:condition="python: meeting">
                <span tal:attributes="class string:item_attribute_label item_listType_${context/getListType}">
                    <tal:itemListType replace="structure here/@@item-listtype/index" />
                </span>
            </div>

            <tal:comment replace="nothing">Send to authority?</tal:comment>
            <div class="discreet" tal:condition="python: 'sendToAuthority' in usedAttrs">
                <span class="item_attribute_label"
                      i18n:translate="PloneMeeting_label_sendToAuthority"></span>:&nbsp;&nbsp;
                <span metal:use-macro="python: here.widget('sendToAuthority', mode='view')" />
            </div>

            <tal:comment replace="nothing">Other MeetingConfigs Clonable To</tal:comment>
            <div class="discreet"
                 tal:condition="python: otherMCs or context.isClonableToOtherMeetingConfigs()"
                 tal:define="otherMCs context/getOtherMeetingConfigsClonableTo">
                <span class="item_attribute_label"
                      i18n:translate="PloneMeeting_label_otherMeetingConfigsClonableTo"></span>:&nbsp;&nbsp;
                <tal:displayOtherMeetingConfigsClonableTo tal:condition="otherMCs">
                    <span tal:content="context/displayOtherMeetingConfigsClonableTo">Other mc clonable to (Emergency)</span>
                </tal:displayOtherMeetingConfigsClonableTo>
                <span tal:condition="not: otherMCs">-</span>
            </div>

            <tal:comment replace="nothing">Privacy</tal:comment>
            <div class="item_attribute_label"
                 tal:define="privacy context/getPrivacy"
                 tal:condition="python: ('privacy' in usedAttrs) and privacy">
              <span class="#" tal:attributes="class string:item_privacy_${privacy}" tal:content="privacy" i18n:translate="" />
            </div>
            <tal:comment replace="nothing">Oral question or item</tal:comment>
            <div class="discreet" tal:condition="python: 'oralQuestion' in usedAttrs">
             <tal:defines define="oq context/getOralQuestion">
              <tal:oral_question condition="oq">
               <img src="#" tal:attributes="src string:${portal_url}/oralQuestion.png">&nbsp;<span class="item_attribute_label" i18n:translate="this_item_is_an_oral_question">This item is an oral question</span>
              </tal:oral_question>
              <tal:not_oral_question condition="not: oq">
                <span class="item_attribute_label" i18n:translate="this_item_is_not_an_oral_question">This item is not an oral question</span>
              </tal:not_oral_question>
             </tal:defines>
            </div>
            <tal:comment replace="nothing">Item initiator</tal:comment>
            <div class="discreet" tal:condition="python: 'itemInitiator' in usedAttrs">
                <tal:defines define="itemInitiator context/getItemInitiator">
                    <span class="item_attribute_label" i18n:translate="PloneMeeting_label_itemInitiator"></span>:&nbsp;&nbsp;
                    <tal:block condition="itemInitiator">
                        <span metal:use-macro="python: here.widget('itemInitiator', mode='view')" />
                    </tal:block>
                    <span tal:condition="not: itemInitiator">-</span>
                </tal:defines>
            </div>
            <tal:comment replace="nothing">Item signatures</tal:comment>
            <div class="discreet"
                 tal:condition="python: meeting and ('signatures' in usedMeetingAttributes)">
                <tal:defines define="redefinedItemSignatures python: context.getItemSignatures(real=True);
                                     mayQuickEdit python: context.mayQuickEdit('itemSignatures', bypassWritePermissionCheck=True);
                                     class_if_highlighted python: redefinedItemSignatures and 'highlightValue' or '';
                                     class_to_use python: mayQuickEdit and (class_if_highlighted and class_if_highlighted + ' collapsibleHeader' or ' collapsibleHeader') or class_if_highlighted + ' collapsibleHeader'">
                    <dl id="itemSignatures"
                        class="collapsible inline collapsedOnLoad">
                        <dt tal:attributes="class class_to_use" style="font-size: 100%;">
                            <span i18n:translate="meeting_signatures" class="item_attribute_label">
                                Item signatures
                            </span>
                            <a tal:condition="mayQuickEdit" href="manage_item_signatures_form" class="link-overlay-pm">
                                <img src="edit.gif"
                                     tal:attributes="src string:${portal_url}/edit.gif" />
                            </a>
                        </dt>
                        <dd class="collapsibleContent">
                            <tal:itemSignatures replace="structure python: context.getItemSignatures().replace('\n', '<br />')">Signatures</tal:itemSignatures>
                        </dd>
                    </dl>
                </tal:defines>
            </div>
        </td>
      </tr>
    </table>

    <tal:comment replace="nothing">People (item attendees, signers and votes)</tal:comment>
    <metal:people use-macro="here/@@pm-macros/itemPeople"/>

    <tal:comment replace="nothing">Description</tal:comment>
    <tal:field define="fieldName python: 'description'; ajaxEdit python:True">
       <metal:f use-macro="context/@@pm-macros/viewContentField"/>
    </tal:field>
    <tal:comment replace="nothing">Detailed description</tal:comment>
    <tal:field define="fieldName python: 'detailedDescription'; ajaxEdit python:True">
       <metal:f use-macro="context/@@pm-macros/viewContentField"/>
    </tal:field>

    <tal:comment replace="nothing">Budgetary informations, manage fields budgetRelated and budgetInfos</tal:comment>
    <tal:block condition="python: 'budgetInfos' in usedAttrs">
        <metal:budgetInfos use-macro="here/@@pm-macros/budgetInfos" />
    </tal:block>

    <tal:comment replace="nothing">Motivation</tal:comment>
    <tal:field define="fieldName python: 'motivation'; ajaxEdit python:True">
       <metal:f use-macro="context/@@pm-macros/viewContentField"/>
    </tal:field>

    <tal:comment replace="nothing">Decision</tal:comment>
    <tal:field define="fieldName python: 'decision'; ajaxEdit python:True">
       <metal:f use-macro="context/@@pm-macros/viewContentField"/>
    </tal:field>

    <tal:comment replace="nothing">Annexes and advices</tal:comment>
    <a name="adviceAndAnnexes"></a>
    <table width="100%" cellpadding="1" cellspacing="1"
           tal:define="hasAnnexes python: context.hasAnnexesWhere(relatedTo='item');
                       hasAnnexesDecision python: context.hasAnnexesWhere(relatedTo='item_decision');
                       hasAdvices python: (meetingConfig.getUseAdvices() and context.displayAdvices())">
        <tr style="vertical-align: top;">
            <td class="itemAnnexesCell" width="50%">
                <fieldset style="margin: 0;">
                    <legend i18n:translate="existing_annexes">Annexes</legend>
                    <table width="100%" class="no-style-table" cellpadding="0" cellspacing="0" style="margin: 0;">
                        <tr tal:define="obj python: context">
                            <td tal:condition="hasAnnexes">
                                <tal:annexes replace="structure python: context.restrictedTraverse('@@annexes-icons')(relatedTo='item')" />
                            </td>
                            <td tal:condition="python: member.has_permission('PloneMeeting: Read decision annex', context) and hasAnnexesDecision">
                                <tal:annexesDecision replace="structure python: context.restrictedTraverse('@@annexes-icons')(relatedTo='item_decision')" />
                            </td>
                            <td tal:condition="python: not hasAnnexes and not hasAnnexesDecision">
                                <span>-</span>
                            </td>
                        </tr>
                    </table>
                </fieldset>
            </td>

            <tal:comment replace="nothing">Advices</tal:comment>
            <td class="itemAdvicesCell" width="50%">
                <fieldset style="margin: 0;" tal:define="meetingItem python: context">
                <legend i18n:translate="PloneMeeting_label_advices">Advices</legend>
                    <tal:advice replace="structure context/@@advices-icons" />
                </fieldset>
            </td>
        </tr>
    </table>

    <tal:comment replace="nothing">In and out moves</tal:comment>
    <tal:field define="fieldName python: 'inAndOutMoves'; ajaxEdit python:True">
       <metal:f use-macro="context/@@pm-macros/viewContentField"/>
    </tal:field>

    <tal:comment replace="nothing">Notes</tal:comment>
    <tal:field define="fieldName python: 'notes'; ajaxEdit python:True">
       <metal:f use-macro="context/@@pm-macros/viewContentField"/>
    </tal:field>

    <tal:comment replace="nothing">Observations</tal:comment>
    <tal:field define="fieldName python: 'observations'; ajaxEdit python:True">
       <metal:f use-macro="context/@@pm-macros/viewContentField"/>
    </tal:field>

    <tal:itemNavigation tal:condition="python: meeting">
      <tal:itemNavigation replace="structure context/@@item-navigation-widget" />
    </tal:itemNavigation>
    <br />

    <tal:comment replace="nothing">Fields that appear only if the item is defined in a configuration</tal:comment>
    <tal:itemInConfig condition="context/isDefinedInTool">

      <tal:templateUsingGroups condition="python: 'itemtemplates' in context.absolute_url()">
        <span class="discreet item_attribute_label"
              i18n:translate="PloneMeeting_label_templateUsingGroups">Template using groups</span>&nbsp:<br />
        <span metal:use-macro="python: here.widget('templateUsingGroups', mode='view')" /><p>&nbsp;</p>
        <a tal:attributes="href python: meetingConfig.absolute_url() + '?pageName=data#itemTemplates'" i18n:translate="back"></a><br /><br />
      </tal:templateUsingGroups>

      <tal:transitionsForRecurring condition="python: context.getParentNode().getId() == 'recurringitems'">
        <span class="discreet item_attribute_label"
              i18n:translate="PloneMeeting_label_meetingTransitionInsertingMe" />&nbsp:<br />
        <span metal:use-macro="python: here.widget('meetingTransitionInsertingMe', mode='view')" /><p>&nbsp;</p>
        <a tal:attributes="href python: meetingConfig.absolute_url() + '?pageName=data#recurringitems'" i18n:translate="back"></a><br /><br />
      </tal:transitionsForRecurring>

    </tal:itemInConfig>

       </metal:body_macro>
    </metal:fill>
  </body>
</html>
