<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US"
      lang="en-US"
      i18n:domain="PloneMeeting">

<body>
<div metal:define-macro="body">

<metal:base_body use-macro="base_macros/body">

<metal:widgets fill-slot="widgets"
           tal:define="member context/@@plone_portal_state/member;
                       border python: test(member.has_role('Manager'), 'enable_border', 'disable_border');
                       dummy python:request.set(border, 1);
                       tool python: context.portal_plonemeeting;
                       portal context/portal_url/getPortalObject;
                       meetingConfig python: tool.getMeetingConfig(here);
                       usedAttrs meetingConfig/getUsedMeetingAttributes;
                       useUserReplacements python: 'replacements' in usedAttrs;">

      <script language="javascript">
      // some checkboxes may not be checked toghether
      var only_one_selected = ['attendee', 'excused', 'absent'];
      function showOrHideReplField(userId, hide_select, enable_user) {
        // Shows of hides "replacement" field for p_userId, depending on p_show.
        var repl = document.getElementById('muser_'+userId+'_replacement');
        if (repl) {
          if (hide_select) {
            // Hide the field, and set 'nobody' as replacement.
            repl.value = '';
            repl.style.display = 'none';
          }
          else {
            // Show the field.
            repl.style.display = '';
          }
        }
        /* If we need to show the "replacement" field, it means that p_userId
           will not attend, so we will remove it from every "replacement" list,
           so it will not be possible to select him as replacement. */
        var userTable = document.getElementById('meeting_users');
        var selectWidgets = userTable.getElementsByTagName('select');
        for (var i=0; i<selectWidgets.length; i++) {
          for (var j=0; j<selectWidgets[i].options.length; j++){
            if (selectWidgets[i].options[j].value.endsWith('__replacedby__' + userId)) {
              if (enable_user == 0) {
                // We will hide this option, and unselect it if it was selected.
                if (selectWidgets[i].options[j].selected) {
                  selectWidgets[i].value = '';
                }
                selectWidgets[i].options[j].style.display = 'none';
                selectWidgets[i].options[j].disabled = true;
              }
              else if (enable_user == 1) {
                // We need to show it.
                selectWidgets[i].options[j].style.display = '';
                selectWidgets[i].options[j].disabled = false;
              }
            }
          }
        }
      }
      function onClickBox(box, boxType, userId) {
            if (box.checked && (only_one_selected.indexOf(boxType) != -1)) {
                // unckeck every other only_one_selected boxes
                only_one_selected.forEach(function(bType) {
                if (bType != boxType) {
                    var obox = document.getElementById('muser_'+userId+'_'+bType);
                    if (obox) obox.checked = false;}
                });
            }
            // finally, if the attendee box is unckecked, disable the 'signatory/voter' boxes
            var attendee_box = document.getElementById('muser_'+userId+'_attendee');
            var signer_box = document.getElementById('muser_'+userId+'_signer');
            if (signer_box) {
                if (!attendee_box.checked) {signer_box.checked = false; signer_box.value = ''; signer_box.disabled = true;}
                else {signer_box.disabled = false;}
            }
            var voter_box = document.getElementById('muser_'+userId+'_voter');
            if (voter_box) {
                if (!attendee_box.checked) {voter_box.checked = false; voter_box.value = ''; voter_box.disabled = true;}
                else {voter_box.disabled = false;}
            }

        if (boxType == 'attendee' && box.checked) {
            showOrHideReplField(userId, hide_select=1, enable_user=1);
        } else if (boxType == 'attendee' && !box.checked) {
            showOrHideReplField(userId, hide_select=1, enable_user=0);
        } else if (boxType == 'excused' || boxType == 'absent') {
            if (box.checked) {
                  showOrHideReplField(userId, hide_select=0, enable_user=0);
            }
            else {showOrHideReplField(userId, hide_select=1, enable_user=0);}
            }
      }
      </script>

      <div>
        <tal:comment replace="nothing">Custom rendering of widgets</tal:comment>
        <table cellpadding="0" cellspacing="0" width="100%">
          <tr valign="top"> <tal:comment replace="nothing">Date</tal:comment>
            <td width="50%"><metal:field use-macro="python:here.widget('date', mode='edit')"/></td>
            <tal:comment replace="nothing">Place</tal:comment>
            <td width="50%" tal:condition="python: 'place' in usedAttrs">
              <script language="javascript">
              <!--
                function toggleOtherPlace(placeWidget) {
                  var place = placeWidget.options[placeWidget.selectedIndex].value;
                  var placeOther = document.getElementById('place_other');
                  if (place == "other") { placeOther.style.display = ""; }
                  else { placeOther.style.display = "none"; }
                }
              -->
              </script>
              <div id="archetypes-fieldname-place"
                   tal:define="field python: context.Schema()['place'];
                               placeError errors/place|nothing;
                               allPlaces python: meetingConfig.getPlaces().strip();
                               allPlaces python: test(allPlaces, allPlaces.split('\r\n'), ());
                               value python: field.getAccessor(context)() or (allPlaces and allPlaces[0] or '');
                               valueIsKnown python: value in allPlaces;
                               placeValue python: test(valueIsKnown, value, 'other');
                               otherValue python: test(valueIsKnown, '', value)"
                   tal:attributes="class python: test(placeError, 'field error ArchetypesSelectionWidget', 'field ArchetypesSelectionWidget')">
              <label i18n:translate="PloneMeeting_label_place" i18n:domain="PloneMeeting"></label><br/>
              <div tal:condition="placeError" tal:content="placeError"></div>
              <select id="place" name="place" tal:condition="allPlaces"
                      onchange="javascript:toggleOtherPlace(this)">
                <option tal:repeat="place allPlaces" tal:content="place"
                        tal:attributes = "value place;
                                          selected python: (request.get('place') == place) or (placeValue  == place)"></option>
                <option value="other" i18n:translate="other_place" i18n:domain="PloneMeeting"
                        tal:attributes="selected python: (request.get('place') == 'other') or (placeValue  == 'other')"></option>
              </select>
              <input type="text" size="30" id="place_other" name="place_other" style="display: none;"
                     tal:attributes="value request/place_other|otherValue;
                                     style python: test(allPlaces, 'display: none', '')"/>
              <script language="javascript">
              <!--
                // Initialize otherPlace field.
                placeWidget = document.getElementById('place');
                if (placeWidget) toggleOtherPlace(placeWidget);
              -->
              </script>
              </div>
            </td>
          </tr>
        </table>

        <metal:field use-macro="python:here.widget('startDate', mode='edit')"/>
        <metal:field use-macro="python:here.widget('midDate', mode='edit')"/>
        <metal:field use-macro="python:here.widget('endDate', mode='edit')"/>
        <metal:field use-macro="python:here.widget('approvalDate', mode='edit')"/>
        <metal:field use-macro="python:here.widget('convocationDate', mode='edit')"/>
        <metal:field use-macro="python:here.widget('deadlinePublish', mode='edit')"/>
        <metal:field use-macro="python:here.widget('deadlineFreeze', mode='edit')"/>

        <metal:field use-macro="python:here.widget('extraordinarySession', mode='edit')"/>

        <metal:field use-macro="python:here.widget('assembly', mode='edit')"/>
        <metal:field use-macro="python:here.widget('assemblyExcused', mode='edit')"/>
        <metal:field use-macro="python:here.widget('assemblyAbsents', mode='edit')"/>

        <tal:comment replace="nothing">User table: attendees, absents, signatories, replacements</tal:comment>
        <tal:users condition="context/showAttendeesFields">
        <div class="field"
             tal:define="error_id python:errors.get('meeting_attendees')"
             tal:attributes="class python: test(error_id, 'field error', 'field');">
            <div class="fieldErrorBox"
                 tal:content="error_id" i18n:translate="">Validation Error</div>
            <div class="formQuestion label">
                <span i18n:translate="assembly_and_signatures">Assembly and signatures</span>
                <span class="formHelp" id="meeting_attendees_help"></span>
            </div>
            <table id="meeting_users" name="meeting_users" class="listing" i18n:domain="PloneMeeting"
                   tal:define="allUsers python: context.get_all_used_held_positions(include_new=True);
                               attendees python: context.get_attendees() or (not context.get_all_used_held_positions(include_new=False) and context.getDefaultAttendees()) or [];
                               excused context/getExcused;
                               absents context/getAbsents;
                               voters context/getVoters;
                               signers python: context.get_signatories() or context.getDefaultSignatories();
                               userReplacements context/getUserReplacements;
                               useVotes meetingConfig/getUseVotes">
              <tal:comment replace="nothing">Column captions</tal:comment>
              <thead>
                <tr>
                  <th class="nosort"></th>
                  <th class="nosort"></th>
                  <th class="nosort" i18n:translate="is_attendee"></th>
                  <th class="nosort" tal:condition="python: 'excused' in usedAttrs"
                      i18n:translate="is_excused"></th>
                  <th class="nosort" tal:condition="python: 'absents' in usedAttrs"
                      i18n:translate="is_absent"></th>
                  <th class="nosort" tal:condition="python: 'signatories' in usedAttrs"
                      i18n:translate="is_signer"></th>
                  <th class="nosort" tal:condition="useUserReplacements"
                      i18n:translate="is_replaced"></th>
                  <th class="nosort" tal:condition="useVotes"
                      i18n:translate="is_voter"></th>
                </tr>
              </thead>
              <tbody>
                <tr tal:repeat="mUser allUsers">
                      <td class="draggable">⣿</td>
                      <tal:defines define="muid mUser/UID;
                                           attendee_id python: 'muser_%s_attendee' % muid;">
                        <td><img tal:attributes="src string:${mUser/getIconURL}" /> <b tal:content="mUser/get_short_title"></b></td>
                        <td align="center">
                          <input type="checkbox" class="noborder"
                                 tal:define="cbid attendee_id"
                                 tal:attributes="id cbid;
                                                 name string:meeting_attendees:list;
                                                 value cbid;
                                                 checked python: test(errors, cbid in request.get('meeting_attendees', []), muid in attendees);
                                                 onClick python: 'onClickBox(this, \'attendee\', \'%s\')' % muid"/>
                        </td>
                        <td align="center" tal:condition="python: 'excused' in usedAttrs">
                          <input type="checkbox" class="noborder"
                                 tal:define="cbid python: 'muser_%s_excused' % muid;"
                                 tal:attributes="id cbid;
                                                 name string:meeting_attendees:list;
                                                 value cbid;
                                                 checked python: test(errors, cbid in request.get('meeting_attendees', []), muid in excused);
                                                 onClick python: 'onClickBox(this, \'excused\', \'%s\')' % muid"/>
                        </td>
                        <td align="center" tal:condition="python: 'absents' in usedAttrs">
                          <input type="checkbox" class="noborder"
                                 tal:define="cbid python: 'muser_%s_absent' % muid;"
                                 tal:attributes="id cbid;
                                                 name string:meeting_attendees:list;
                                                 value cbid;
                                                 checked python: test(errors, cbid in request.get('meeting_attendees', []), muid in absents);
                                                 onClick python: 'onClickBox(this, \'absent\', \'%s\')' % muid"/>
                        </td>
                        <td align="center" tal:condition="python: 'signatories' in usedAttrs">
                          <select tal:define="sid python: 'muser_%s_signer' % muid;"
                                 tal:attributes="id sid;
                                                 name string:meeting_signatories:list;
                                                 value sid;
                                                 disabled python: test(errors, attendee_id not in request.get('meeting_attendees', []), muid not in attendees);
                                                 onClick python: 'onClickBox(this, \'signer\', \'%s\')' % muid">
                            <option value="">-</option>
                            <tal:signature_number repeat="signature_number python: [str(i) for i in range(1, 21)]">
                                  <tal:defines define="value string:${muid}__signaturenumber__${signature_number};">
                                  <option
                                      tal:attributes="
                                      value value;
                                      selected python: test(errors, value in request.get('meeting_signatories', []), (muid in signers and signers[muid]==signature_number))"
                                      tal:content="signature_number">1</option>
                                  </tal:defines>
                                  <span tal:content="muid" />
                                  <span tal:content="signers" />
                                  <span tal:content="signature_number" />
                                  <span tal:content="python: muid in signers and signers[muid]==signature_number" />
                            </tal:signature_number>
                          </select>
                        </td>
                        <td tal:condition="useUserReplacements">
                          <select tal:define="mid mUser/getId;
                                              sid python: 'muser_%s_replacement' % muid;
                                              aid python: attendee_id;
                                              eid python: 'muser_%s_excused' % muid;
                                              abid python: 'muser_%s_absent' % muid;
                                              show python: test(errors, (eid in request.get('meeting_attendees', []) or abid in request.get('meeting_attendees', [])), muid in (excused + absents))"
                                  tal:attributes="id sid;
                                                  name string:meeting_replacements:list;
                                                  style python: test(show, '', 'display:none')">
                            <option value="">-</option>
                            <tal:other repeat="oUser python: context.adapted().filterPossibleUserReplacement(allUsers)">
                              <tal:defines define="value string:${muid}__replacedby__${oUser/UID};">
                              <option tal:define="ouid oUser/UID;
                                                  show python: test(errors, 'muser_%s_attendee' % ouid in request.get('meeting_attendees', []), ouid in attendees)"
                                      tal:condition="python: ouid != muid"
                                      tal:content="oUser/get_short_title"
                                      tal:attributes="value value;
                                                      data-icon string:${portal_url}/held_position_icon.png;
                                                      style python: test(show, '', 'display:none');
                                                      selected python: test(errors, value in request.get('meeting_replacements', []), (muid in userReplacements) and (userReplacements[muid]==ouid))" >
                              </option>
                              </tal:defines>
                            </tal:other>
                          </select>
                        </td>
                        <td align="center" tal:condition="useVotes">
                          <input type="checkbox" class="noborder"
                                 tal:define="cbid python: 'muser_%s_voter' % muid;"
                                 tal:attributes="id cbid;
                                                 name string:meeting_voters:list;
                                                 value cbid;
                                                 disabled python: test(errors, attendee_id not in request.get('meeting_attendees', []), muid not in attendees);
                                                 checked python: test(errors, cbid in request.get('meeting_voters', []), muid in voters);
                                                 onClick python: 'onClickBox(this, \'voter\', \'%s\')' % muid"/>
                        </td>
                      </tal:defines>
                </tr>
              </tbody>
            </table>
        </div>
        <script type="text/javascript">
            $(document).ready(function() {
                // initialize drag and drop
                $('#meeting_users').tableDnD({
                    onDrop: function(table, row) {
                       alert($.tableDnD.serialize());
                      },
                      dragHandle: ".draggable",
                      onDragClass: "dragindicator dragging"
                  });
            });
        </script>
        </tal:users>

        <metal:field use-macro="python:here.widget('assemblyGuests', mode='edit')"/>
        <metal:field use-macro="python:here.widget('assemblyProxies', mode='edit')"/>
        <metal:field use-macro="python:here.widget('assemblyStaves', mode='edit')"/>

        <metal:field use-macro="python:here.widget('signatures', mode='edit')"/>

        <tal:comment replace="nothing">Information for the pre-meeting</tal:comment>
        <fieldset tal:condition="python: 'preMeetingDate' in usedAttrs and not context.isTemporary()">
          <legend i18n:translate="pre_meeting" i18n:domain="PloneMeeting"></legend>
          <table cellpadding="0" cellspacing="0" class="no-style-table meeting-premeeting-fields">
            <tr>
              <td><metal:field use-macro="python:here.widget('preMeetingDate', mode='edit')"/></td>
              <td tal:condition="python: 'preMeetingPlace' in usedAttrs">
                <metal:field use-macro="python:here.widget('preMeetingPlace', mode='edit')"/>
              </td>
            </tr>
          </table>
        </fieldset>
        <tal:field define="fieldName python: 'inAndOutMoves'">
          <metal:f use-macro="context/@@pm-macros/editContentField"/>
        </tal:field>
        <tal:field define="fieldName python: 'notes'">
          <metal:f use-macro="context/@@pm-macros/editContentField"/>
        </tal:field>
        <tal:field define="fieldName python: 'authorityNotice'">
          <metal:f use-macro="context/@@pm-macros/editContentField"/>
        </tal:field>
        <tal:field define="fieldName python: 'observations'">
          <metal:f use-macro="context/@@pm-macros/editContentField"/>
        </tal:field>
        <tal:field define="fieldName python: 'preObservations'">
          <metal:f use-macro="context/@@pm-macros/editContentField"/>
        </tal:field>
        <tal:field define="fieldName python: 'committeeObservations'">
          <metal:f use-macro="context/@@pm-macros/editContentField"/>
        </tal:field>
        <tal:field define="fieldName python: 'votesObservations'">
          <metal:f use-macro="context/@@pm-macros/editContentField"/>
        </tal:field>
        <tal:field define="fieldName python: 'publicMeetingObservations'">
          <metal:f use-macro="context/@@pm-macros/editContentField"/>
        </tal:field>
        <tal:field define="fieldName python: 'secretMeetingObservations'">
          <metal:f use-macro="context/@@pm-macros/editContentField"/>
        </tal:field>

        <tal:comment replace="nothing">For the admin only</tal:comment>
        <fieldset tal:condition="python: member.has_role('Manager')">
          <legend i18n:translate="" i18n:domain="PloneMeeting">for_admin_only</legend>
          <table cellpadding="0" cellspacing="0" width="100%" class="meeting-manager-fields">
            <tr valign="top">
              <td width="33%"><metal:field use-macro="python:here.widget('meetingNumber', mode='edit')"/></td>
              <td width="34%"><metal:field use-macro="python:here.widget('firstItemNumber', mode='edit')"/></td>
              <td width="33%"><metal:field use-macro="python:here.widget('meetingConfigVersion', mode='edit')"/></td>
            </tr>
          </table>
        </fieldset>

      </div>

</metal:widgets>
</metal:base_body>
</div>

</body>
</html>
