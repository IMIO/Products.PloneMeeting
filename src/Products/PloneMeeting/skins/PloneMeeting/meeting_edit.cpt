<tal:block metal:define-macro="master"
           define="errors options/state/getErrors | nothing;
                   temporary here/isTemporary | nothing;
                   dummy python:temporary and request.set('disable_border', True);
                   schematas here/Schemata;
                   fieldsets python:[key for key in schematas.keys() if (key != 'metadata') and (schematas[key].editableFields(here, visible_only=True))];
                   default_fieldset python:(not schematas or schematas.has_key('default')) and 'default' or fieldsets[0];
                   fieldset request/fieldset|options/fieldset|default_fieldset;
                   fields python:schematas[fieldset].editableFields(here);
                   dummy python:here.at_isEditable(fields);
                   portal_type python:here.getPortalTypeName().lower().replace(' ', '_');
                   type_name here/getPortalTypeName|here/archetype_name;
                   base_macros here/edit_macros/macros;
                   edit_template python:'%s_edit' % portal_type;
                   edit_macros python:path('here/%s/macros | nothing' % edit_template);
                   header_macro edit_macros/header | header_macro | base_macros/header;
                   typedescription_macro edit_macros/typedescription | typedescription_macro | base_macros/typedescription;
                   body_macro edit_macros/body | body_macro | base_macros/body;
                   footer_macro edit_macros/footer | footer_macro | base_macros/footer;
                   lockable python:hasattr(here, 'wl_isLocked');
                   isLocked python:lockable and here.wl_isLocked();
                   css python:context.getUniqueWidgetAttr(fields, 'helper_css');
                   js python:context.getUniqueWidgetAttr(fields, 'helper_js');
                   tool python: context.portal_plonemeeting;
                   member tool/getUser;
                   portal context/portal_url/getPortalObject;
                   meetingConfig python: tool.getMeetingConfig(here);
                   bilingual python: 'secondLanguage' in tool.getModelAdaptations();
                   langs python: tool.getAvailableInterfaceLanguages(True, True);
                   usedAttrs meetingConfig/getUsedMeetingAttributes;
                   useUserReplacements meetingConfig/getUseUserReplacements">

<html xmlns="http://www.w3.org/1999/xhtml"
      xml:lang="en"
      lang="en"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      metal:use-macro="here/main_template/macros/master"
      i18n:domain="plone">

  <metal:head fill-slot="top_slot">
    <tal:block define="macro edit_macros/topslot | nothing" condition="macro">
    <metal:block use-macro="macro" />
    </tal:block>
  </metal:head>
  
  <metal:javascript_head fill-slot="javascript_head_slot">
    <tal:block define="macro context/archetypes_custom_js/macros/javascript_head | nothing"
               condition="macro">
      <metal:block use-macro="macro" />
    </tal:block>
    <tal:js condition="js"
            repeat="item js">
      <script type="text/javascript"
              charset="iso-8859-1"
              tal:condition="python:exists('portal/%s' % item)"
              tal:attributes="src string:$portal_url/$item">
      </script>
    </tal:js>
    <tal:block define="macro edit_macros/javascript_head | nothing"
                    condition="macro">
      <metal:block use-macro="macro" />
    </tal:block>
  </metal:javascript_head>

  <metal:css fill-slot="css_slot">
    <tal:css condition="css"
             repeat="item css">
      <style type="text/css" media="all"
             tal:condition="python:exists('portal/%s' % item)"
             tal:content="structure string:&lt;!-- @import url($portal_url/$item); --&gt;">
      </style>
    </tal:css>
    <tal:block define="macro edit_macros/css | nothing"
                    condition="macro">
      <metal:block use-macro="macro" />
    </tal:block>
  </metal:css>
    
  <body>

    <metal:fill fill-slot="main">
      <metal:main define-macro="main">
      <script language="javascript">
      // When a checkbox is unchecked, what other one will we check?
      var uncheckWillCheck = {"attendee":"excused", "excused":"attendee",
                              "absent":"attendee", "lateAttendee":"attendee"};
      function showOrHideReplField(userId, show) {
        // Shows of hides "replacement" field for p_userId, depending on p_show.
        var repl = document.getElementById('muser_'+userId+'_replacement');
        if (repl) {
          if (!show) {
            // Hide the field, and set 'nobody' as replacement.
            repl.value = '';
            repl.style.display = 'none';
          }
          else {
            // Show the field.
            repl.style.display = '';
          }
        }
        /* If we need to show the "replacement" field, it means that p_userId
           will not attend, so we will remove it from every "replacement" list,
           so it will not be possible to select him as replacement. */
        var userTable = document.getElementById('meeting_users');
        var selectWidgets = userTable.getElementsByTagName('select');
        for (var i=0; i<selectWidgets.length; i++) {
          for (var j=0; j<selectWidgets[i].options.length; j++){
            if (selectWidgets[i].options[j].value == userId) {
              if (show) {
                // We will hide this option, and unselect it if it was selected.
                if (selectWidgets[i].options[j].selected) {
                  selectWidgets[i].value = '';
                }
                selectWidgets[i].options[j].style.display = 'none';
                selectWidgets[i].options[j].disabled = true;
              }
              else {
                // We need to show it.
                selectWidgets[i].options[j].style.display = '';
                selectWidgets[i].options[j].disabled = false;
              }
            }
          }
        }
      }
      function onClickBox(box, boxType, userId) {
        if (!box.checked){
          // A box has been unchecked. We must check another one.
          var checkType = uncheckWillCheck[boxType];
          var obox = document.getElementById('muser_'+userId+'_'+checkType);
          if (obox) obox.checked = true;
          // Moreover, uncheck attendees => uncheck lateAttendees
          if (boxType == 'attendee') {
            var obox = document.getElementById('muser_'+userId+'_lateAttendee');
            if (obox) obox.checked = false;
          }
        }
        else {
          // We must uncheck every other box for this user
          for (var bType in uncheckWillCheck) {
            if (bType != boxType) {
              var obox = document.getElementById('muser_'+userId+'_'+bType);
              // It may not exist if the corresponding field is not used.
              if (obox) obox.checked = false;
            }
          }
          // Exception: late attendees checked => attendees checked
          if (boxType == 'lateAttendee') {
            document.getElementById('muser_'+userId+'_attendee').checked=true;
          }
        }
        // Must we show or hide the "replacements" column?
        if ((!box.checked && (boxType == 'attendee')) ||
            (box.checked && (boxType == 'excused')) ||
            (box.checked && (boxType == 'absent'))) {
          showOrHideReplField(userId, true);
        }
        else showOrHideReplField(userId, false);
      }
      </script>

      <div tal:define="portal_type portal_type|string:unknowntype">
      <form name="edit_form" method="post" enctype="multipart/form-data"
            class="enableUnloadProtection atBaseEditForm"
            tal:attributes="action python:here.absolute_url()+'/'+template.id;
                            id string:${portal_type}-base-edit">

        <tal:comment replace="nothing">Custom rendering of widgets</tal:comment>
        <table cellpadding="0" cellspacing="0" width="100%">
          <tr valign="top"> <tal:comment replace="nothing">Date</tal:comment>
            <td width="50%"><metal:field use-macro="python:here.widget('date', mode='edit')"/></td>
            <tal:comment replace="nothing">Place</tal:comment>
            <td width="50%" tal:condition="python: 'place' in usedAttrs">
              <script language="javascript">
              <!--
                function toggleOtherPlace(placeWidget) {
                  var place = placeWidget.options[placeWidget.selectedIndex].value;
                  var placeOther = document.getElementById('place_other');
                  if (place == "other") { placeOther.style.display = ""; }
                  else { placeOther.style.display = "none"; }
                }
              -->
              </script>
              <div id="archetypes-fieldname-place"
                   tal:define="field python: context.Schema()['place'];
                               placeError errors/place|nothing;
                               allPlaces python: meetingConfig.getPlaces().strip();
                               allPlaces python: test(allPlaces, allPlaces.split('\r\n'), ());
                               value python: field.getAccessor(context)() or (allPlaces and allPlaces[0] or '');
                               valueIsKnown python: value in allPlaces;
                               placeValue python: test(valueIsKnown, value, 'other');
                               otherValue python: test(valueIsKnown, '', value)"
                   tal:attributes="class python: test(placeError, 'field error ArchetypesSelectionWidget', 'field ArchetypesSelectionWidget')">
              <label i18n:translate="PloneMeeting_label_place" i18n:domain="PloneMeeting"></label><br/>
              <div tal:condition="placeError" tal:content="placeError"></div>
              <select id="place" name="place" tal:condition="allPlaces"
                      onchange="javascript:toggleOtherPlace(this)">
                <option tal:repeat="place allPlaces" tal:content="place"
                        tal:attributes = "value place;
                                          selected python: (request.get('place') == place) or (placeValue  == place)"></option>
                <option value="other" i18n:translate="hs_other" i18n:domain="PloneMeeting"
                        tal:attributes="selected python: (request.get('place') == 'other') or (placeValue  == 'other')"></option>
              </select>
              <input type="text" size="30" id="place_other" name="place_other" style="display: none;"
                     tal:attributes="value request/place_other|otherValue;
                                     style python: test(allPlaces, 'display: none', '')"/>
              <script language="javascript">
              <!--
                // Initialize otherPlace field.
                placeWidget = document.getElementById('place');
                if (placeWidget) toggleOtherPlace(placeWidget);
              -->
              </script>
              </div>
            </td>
          </tr>
          <tr valign="top" tal:condition="python: 'startDate' in usedAttrs">
            <tal:comment replace="nothing">Effective start and end dates</tal:comment>
            <td width="50%"><metal:field use-macro="python:here.widget('startDate', mode='edit')"/></td>
            <td width="50%"><metal:field use-macro="python:here.widget('endDate', mode='edit')"/></td>
          </tr>
          <tr valign="top" tal:condition="python: 'midDate' in usedAttrs">
            <tal:comment replace="nothing">Mid date</tal:comment>
            <td colspan="2"><metal:field use-macro="python:here.widget('midDate', mode='edit')"/></td>
          </tr>
          <tr valign="top"> <tal:comment replace="nothing">Deadlines</tal:comment>
            <td width="50%"><metal:field use-macro="python:here.widget('deadlinePublish', mode='edit')"/></td>
            <td width="50%"><metal:field use-macro="python:here.widget('deadlineFreeze', mode='edit')"/></td>
          </tr>
        </table>
        <metal:field use-macro="python:here.widget('signatures', mode='edit')"/>
        <metal:field use-macro="python:here.widget('assembly', mode='edit')"/>
        <tal:comment replace="nothing">User table: attendees, lateAttendees, absents, signatories, replacements</tal:comment>
        <tal:users condition="python: 'attendees' in usedAttrs">
        <table id="meeting_users" name="meeting_users" class="vertical listing" i18n:domain="PloneMeeting"
               tal:define="allUsers meetingConfig/getActiveMeetingUsers;
                           attendees context/getAttendees;
                           lateAttendees context/getLateAttendees;
                           excused context/getExcused;
                           absents context/getAbsents;
                           signers context/getSignatories;
                           allSigners python: [u.getId() for u in meetingConfig.getActiveMeetingUsers(usages=('signer',))];
                           userReplacements context/getUserReplacements">
          <tal:comment replace="nothing">Column captions</tal:comment>
          <tr>
            <th></th>
            <th i18n:translate="is_attendee"></th>
            <th tal:condition="python: 'lateAttendees' in usedAttrs"
                i18n:translate="is_late_attendee"></th>
            <th tal:condition="python: 'excused' in usedAttrs"
                i18n:translate="is_excused"></th>
            <th tal:condition="python: 'absents' in usedAttrs"
                i18n:translate="is_absent"></th>
            <th tal:condition="python: 'signatories' in usedAttrs"
                i18n:translate="is_signer"></th>
            <th tal:condition="useUserReplacements" i18n:translate="is_replaced"></th>
          </tr>
          <tr tal:repeat="mUser allUsers">
            <td><b tal:content="mUser/Title"></b></td>
            <td align="center">
              <input type="checkbox" class="noborder"
                     tal:define="mid mUser/getId;
                                 cbid python: 'muser_%s_attendee' % mid;"
                     tal:attributes="id cbid; name cbid;
                                     checked python: test(errors, request.get(cbid, '')=='on', mid in attendees);
                                     onClick python: 'onClickBox(this, \'attendee\', \'%s\')' % mid"/>
            </td>
            <td align="center" tal:condition="python: 'lateAttendees' in usedAttrs">
              <input type="checkbox" class="noborder"
                     tal:define="mid mUser/getId;
                                 cbid python: 'muser_%s_lateAttendee' % mid;"
                     tal:attributes="id cbid; name cbid;
                                     checked python: test(errors, request.get(cbid, '')=='on', mid in lateAttendees);
                                     onClick python: 'onClickBox(this, \'lateAttendee\', \'%s\')' % mid"/>
            </td>
            <td align="center" tal:condition="python: 'excused' in usedAttrs">
              <input type="checkbox" class="noborder"
                     tal:define="mid mUser/getId;
                                 cbid python: 'muser_%s_excused' % mid;"
                     tal:attributes="id cbid; name cbid;
                                     checked python: test(errors, request.get(cbid, '')=='on', mid in excused);
                                     onClick python: 'onClickBox(this, \'excused\', \'%s\')' % mid"/>
            </td>
            <td align="center" tal:condition="python: 'absents' in usedAttrs">
              <input type="checkbox" class="noborder"
                     tal:define="mid mUser/getId;
                                 cbid python: 'muser_%s_absent' % mid;"
                     tal:attributes="id cbid; name cbid;
                                     checked python: test(errors, request.get(cbid, '')=='on', mid in absents);
                                     onClick python: 'onClickBox(this, \'absent\', \'%s\')' % mid"/>
            </td>
            <td align="center" tal:condition="python: 'signatories' in usedAttrs">
              <input type="checkbox" class="noborder"
                     tal:define="mid mUser/getId;
                                 cbid python: 'muser_%s_signer' % mid;"
                     tal:condition="python: mid in allSigners"
                     tal:attributes="id cbid; name cbid;
                                     checked python: test(errors, request.get(cbid, '')=='on', mid in signers);
                                     onClick python: 'onClickBox(this, \'signer\', \'%s\')' % mid"/>
            </td>
            <td tal:condition="useUserReplacements">
              <select tal:define="mid mUser/getId;
                                  sid python: 'muser_%s_replacement' % mid;
                                  aid python: 'muser_%s_attendee' % mid;
                                  show python: test(errors, not request.get(aid,''), mid not in attendees)"
                      tal:attributes="id sid; name sid;
                                      style python: test(show, '', 'display:none')">
                <option value="">-</option>
                <tal:other repeat="oUser allUsers">
                  <option tal:define="oid oUser/getId;
                                      show python: test(errors, request.get('muser_%s_attendee'%oid,'')=='on', oid in attendees)"
                          tal:condition="python: oid != mid"
                          tal:content="oUser/Title"
                          tal:attributes="value oid;
                                          style python: test(show, '', 'display:none');
                                          selected python: test(errors, request.get(sid)==oid, (mid in userReplacements) and (userReplacements[mid]==oid))" >
                  </option>
                </tal:other>
              </select>
            </td>
          </tr>
        </table>
        </tal:users>
        <tal:comment replace="nothing">Information for the pre-meeting</tal:comment>
        <fieldset tal:condition="python: 'preMeetingDate' in usedAttrs and not temporary">
          <legend i18n:translate="pre_meeting" i18n:domain="PloneMeeting"></legend>
          <table cellpadding="0" cellspacing="0" class="no-style-table">
            <tr>
              <td><metal:field use-macro="python:here.widget('preMeetingDate', mode='edit')"/></td>
              <td tal:condition="python: 'preMeetingPlace' in usedAttrs">
                <metal:field use-macro="python:here.widget('preMeetingPlace', mode='edit')"/>
              </td>
            </tr>
          </table>
        </fieldset>
        <tal:field define="fieldName python: 'observations'"
                   condition="python: context.showObs('observations')">
          <metal:f use-macro="context/hs_macros/macros/editContentField"/>
        </tal:field>
        <tal:field define="fieldName python: 'preObservations'"
                   condition="python: context.showObs('preObservations')">
          <metal:f use-macro="context/hs_macros/macros/editContentField"/>
        </tal:field>
        <metal:field use-macro="python:here.widget('allItemsAtOnce', mode='edit')"/>

        <tal:comment replace="nothing">For the admin only</tal:comment>
        <fieldset tal:condition="python: member.has_role('Manager')">
          <legend i18n:translate="" i18n:domain="PloneMeeting">for_admin_only</legend>
          <table cellpadding="0" cellspacing="0" width="100%">
            <tr valign="top">
              <td width="33%"><metal:field use-macro="python:here.widget('meetingNumber', mode='edit')"/></td>
              <td width="34%"><metal:field use-macro="python:here.widget('firstItemNumber', mode='edit')"/></td>
              <td width="33%"><metal:field use-macro="python:here.widget('meetingConfigVersion', mode='edit')"/></td>
            </tr>
          </table>
        </fieldset>

        <div class="formControls">
          <input type="hidden" name="fieldset" tal:attributes="value fieldset"/>
          <input type="hidden" name="form.submitted" value="1"/>
          <input type="hidden" name="add_reference.field:record" value=""/>
          <input type="hidden" name="add_reference.type:record" value=""/>
          <input type="hidden" name="add_reference.destination:record" value=""/>

          <tal:env define="env request/controller_state/kwargs">
            <tal:loop repeat="varname python:('reference_source_url', 'reference_source_field', 'reference_source_fieldset')">
              <tal:reference define="items python:env.get(varname, request.get(varname))"
                             condition="items">
              <input tal:repeat="item items"
                     type="hidden" name="form_env.reference_source_url:list:record"
                     tal:attributes="value item;
                                     name string:form_env.${varname}:list:record"/>
              </tal:reference>
            </tal:loop>
          </tal:env>

          <tal:comment replace="nothing">
            Turn 'persistent_' variables from controller_state persistent
          </tal:comment>
          <tal:env repeat="env request/controller_state/kwargs/items">
          <input type="hidden" name="key"
                 tal:define="key python:env[0];
                             value python:env[1]"
                 tal:condition="python:key.startswith('persistent_')"
                 tal:attributes="name string:form_env.${key}:record;
                                 value value"/>
          </tal:env>

          <tal:comment replace="nothing">
            Turn 'persistent_' variables from forms (GET/POST) persistent
          </tal:comment>
          <tal:env repeat="env request/form">
          <input type="hidden" name="key"
                 tal:define="key env;
                             value request/?env"
                 tal:condition="python:key.startswith('persistent_')"
                 tal:attributes="name string:form_env.${key}:record;
                                 value value"/>
          </tal:env>

          <tal:comment replace="nothing">Store referrer to remember where to go back</tal:comment>
          <input type="hidden" name="last_referer"
               tal:define="last_referer python:here.session_restore_value('HTTP_REFERER', request.form.get('last_referer', request.get('HTTP_REFERER')))"
               tal:attributes="value python:(last_referer and '%s/%s' % (here.absolute_url(), template.id) not in last_referer) and last_referer or (here.getParentNode() and here.getParentNode().absolute_url())"/>

          <tal:comment replace="nothing">Buttons</tal:comment>
          <input class="hsButton" type="submit" name="form_submit"
                 i18n:attributes="value label_save;"
                 tal:attributes="disabled python:test(isLocked, 'disabled', None);"/>
          <input class="hsButton hsCancel" type="submit" name="form.button.cancel"
                 i18n:attributes="value label_cancel"/>
        </div>
      </form>
      </div>
      <div tal:replace="structure provider:plone.belowcontentbody" />
      </metal:main>
    </metal:fill>

  </body>

</html>

</tal:block>
