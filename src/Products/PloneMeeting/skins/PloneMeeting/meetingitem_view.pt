<html xmlns="http://www.w3.org/1999/xhtml"
      xml:lang="en-US" lang="en-US"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      metal:use-macro="here/main_template/macros/master"
      i18n:domain="PloneMeeting">

<body>
  <metal:main fill-slot="main"
     tal:define="tool python: context.portal_plonemeeting;
                 member tool/getUser">

  <script language="javascript"
    tal:content="python: 'ploneEditor = \'%s\';' % member.getProperty('wysiwyg_editor', '')">
  </script>
  <script language="javascript">
  <!--
  var currentFieldName = '';
  function initKupuField() {
    window.kupu = initPloneKupu('kupu-editor-' + currentFieldName);
  }
  function initRichTextField(rq, hook) {
    /* Function that needs to be called when getting the edit view of a
       rich-text field through Ajax. */
    // Javascripts inside this zone will not be executed. So find them
    // and trigger their execution here.
    var scripts = cssQuery('script', hook);
    var fieldName = rq.hook.split('_')[1];
    for (var i=0; i<scripts.length; i++) {
      var scriptContent = scripts[i].innerHTML;
      if (scriptContent.search('addEventHandler') != -1) {
        // This is a kupu field that will register an event onLoad on
        // window but this event will never be triggered. So do it by
        // hand.
        currentFieldName = hook.id.split('_')[1];
        setTimeout("initKupuField()", 1000);
      }
      else { eval(scriptContent); }
    }
    // Initialize FCK editor if it is the used editor
    if (ploneEditor == 'FCKeditor') { FCKeditor_Plone_Init(); }
    // Initialize CKeditor if it is the used editor
    if (ploneEditor == 'CKeditor') { jQuery(launchCKInstances([fieldName,])); }
  }
  function getRichTextContent(rq, params) {
    /* Gets the content of a rich text field before sending it through an Ajax
       request. */
    var fieldName = rq.hook.split('_')[1];
    var formId = 'ajax_edit_' + fieldName;
    var theForm = document.getElementById(formId);
    var theWidget = theForm[fieldName];
    if (ploneEditor == 'Kupu') {
      // Save the Kupu content to the field in the form.
      window.kupu.saveDataToField(theForm, theWidget);
      var drawer = window.document.getElementById('kupu-librarydrawer');
      if (drawer) { drawer.parentNode.removeChild(drawer); }
    }
    if (ploneEditor == 'FCKeditor'){
      if ( typeof( window.parent.FCKeditor_OnComplete ) == 'function' ) {
        var fckObject = FCKeditorAPI.Instances[fieldName];
        fckObject.SetStatus(FCK_STATUS_COMPLETE);
        finalizePublication(fckObject);
        }
    }
    if (ploneEditor == 'CKeditor'){
       /* with CKeditor the value is not stored in the widget so get the data from the real CKeditor instance */
       theWidget.value = window.parent.CKEDITOR.instances[fieldName].getData();
    }
    /* Disable the Plone automatic detection of changes to the form. Indeed,
       Plone is not aware that we have sent the form, so he will try to display
       a message, saying that changes will be lost because an unsubmitted form
       contains changed data. */
    window.onbeforeunload = null;
    // Construct parameters and return them.
    var params = "&fieldName=" + encodeURIComponent(fieldName) +
                 '&fieldContent=' + encodeURIComponent(theWidget.value);
    return params
  }
  -->
  </script>
  <div metal:define-macro="body"
       tal:define="dummy context/checkPrivacyViewable;
                   meetingConfig python:tool.getMeetingConfig(context);
                   meeting context/getMeeting;
                   showColors tool/showColorsForUser;
                   usedAttrs meetingConfig/getUsedItemAttributes;
                   usedMeetingAttributes meetingConfig/getUsedMeetingAttributes;
                   bilingual python: 'secondLanguage' in tool.getModelAdaptations();
                   langs python: tool.getAvailableInterfaceLanguages(True, True);
                   itemNumber python: context.getItemNumber(relativeTo='meeting')">
    <tal:comment replace="nothing">Item header (title, reference, etc)</tal:comment>
    <div tal:replace="structure provider:plone.abovecontenttitle" />
    <metal:header use-macro="here/hs_macros/macros/itemHeader"/>
    <div tal:replace="structure provider:plone.belowcontenttitle" />
    <metal:field use-macro="here/hs_macros/macros/objectHistory" />

    <tal:comment replace="nothing">Form used for going to meetingitem_view for an item
        whose number is given by the user.</tal:comment>

    <form name="formGotoItem" tal:attributes="action python: context.absolute_url_path() + '/object_goto'">
        <input type="hidden" name="objectId"/>
        <input type="hidden" name="meetingUid"/>
        <input type="hidden" name="idType" value="number"/>
    </form>

    <div tal:replace="structure provider:plone.abovecontentbody" />

    <tal:comment replace="nothing">Show navigation between items of the same meeting</tal:comment>
    <div align="center" tal:condition="python: meeting">
      <metal:itemNavigation use-macro="context/hs_navigate/macros/item"/>
    </div>

    <table width="100%">
      <tr valign="top">
        <td width="50%">
        <tal:comment replace="nothing">Classifier</tal:comment>
        <table class="discreet" tal:condition="python: 'classifier' in usedAttrs"
               cellpadding="0" cellspacing="0">
          <tr valign="top">
            <td><i><span i18n:translate="PloneMeeting_label_classifier"></span></i>&nbsp;:&nbsp;&nbsp;</td>
            <td tal:condition="context/getClassifier" tal:content="python: context.getClassifier().Title()"></td>
            <td tal:condition="not: context/getClassifier">-</td>
          </tr>
        </table>

        <tal:comment replace="nothing">Category or proposing group (if group is used as category)</tal:comment>
        <div class="discreet" tal:define="cat python: context.getCategory(True)" tal:condition="python: cat">
          <i><span tal:condition="not: meetingConfig/getUseGroupsAsCategories"
                   i18n:translate="MeetingCategory"></span>
             <span tal:condition="meetingConfig/getUseGroupsAsCategories"
                   i18n:translate="PloneMeeting_label_proposingGroup"></span></i>:&nbsp;&nbsp;
             <span tal:content="python: cat.getName()"></span>
        </div>

        <tal:comment replace="nothing">Proposing group (if group is not used as category)</tal:comment>
        <div class="discreet" tal:condition="not: meetingConfig/getUseGroupsAsCategories">
          <i><span i18n:translate="PloneMeeting_label_proposingGroup"></span></i>:&nbsp;&nbsp;
             <span tal:content="python: getattr(tool, context.getProposingGroup()).Title()"></span>
        </div>

        <tal:comment replace="nothing">Associated groups</tal:comment>
        <div class="discreet" tal:condition="python: 'associatedGroups' in usedAttrs">
          <i><span i18n:translate="PloneMeeting_label_associatedGroups"></span></i>:&nbsp;&nbsp;
             <span tal:repeat="associatedGroup here/getAssociatedGroups"
                   tal:content="structure python: getattr(tool, associatedGroup).Title() + '&nbsp;&nbsp;'"></span>
        </div>

        <tal:comment replace="nothing">Copy groups for this item</tal:comment>
        <div class="discreet" tal:condition="python: context.isCopiesEnabled()">
          <i><span i18n:translate="PloneMeeting_label_copyGroups"></span></i>:&nbsp;&nbsp;
             <span metal:use-macro="python: here.widget('copyGroups', mode='view')" />
        </div>

        <tal:comment replace="nothing">Item assembly</tal:comment>
        <div class="discreet"
             tal:condition="python: ('itemAssembly' in usedAttrs) and ('assembly' in usedMeetingAttributes) and meeting">
          <tal:defines define="redefinedItemAssembly python: context.getItemAssembly(real=True).strip().replace('\n', '<br/>')">
          <i tal:attributes="class python: redefinedItemAssembly and 'highlightRedefinedValue' or ''"><span i18n:translate="item_attendees"></span></i>:&nbsp;&nbsp;
             <span tal:replace="structure python: context.getItemAssembly().strip().replace('\n', '<br/>')"/>
          </tal:defines>
        </div>

        <tal:comment replace="nothing">Item keywords</tal:comment>
        <div class="discreet" tal:condition="python: 'itemKeywords' in usedAttrs">
          <i><span i18n:translate="PloneMeeting_label_itemKeywords"></span></i>:&nbsp;&nbsp;
             <span tal:content="context/itemKeywords"></span>
        </div>

        <tal:comment replace="nothing">Item tags</tal:comment>
        <div class="discreet" tal:condition="python: 'itemTags' in usedAttrs">
          <i><span i18n:translate="PloneMeeting_label_itemTags"></span></i>:&nbsp;&nbsp;
             <span tal:content="python: ', '.join(context.getItemTags())"></span>
        </div>
        <tal:comment replace="nothing">Predecessor</tal:comment>
        <div class="discreet" tal:define="predecessors python: context.adapted().getPredecessors()"
                              tal:condition="predecessors">
          <i><span i18n:translate="PloneMeeting_label_predecessor"></span></i>:&nbsp;&nbsp;
             <tal:predecessors repeat="predecessor predecessors">
              <tal:predecessor replace="structure predecessor" />
             </tal:predecessors>
        </div>
        <div class="discreet"
             tal:condition="python: 'itemIsSigned' in usedAttrs">
          <i><span i18n:translate="PloneMeeting_label_itemIsSigned"></span></i>:&nbsp;&nbsp;
          <tal:defines define="meetingItem python: context;
                               ajaxEdit python: True;">
           <metal:itemIsSigned use-macro="here/hs_macros/macros/itemIsSigned" />
          </tal:defines>
        </div>
        </td>
        <td width="50%" align="right">
        <tal:comment replace="nothing">Preferred meeting</tal:comment>
        <div class="discreet">
          <i><span i18n:translate="PloneMeeting_label_preferredMeeting"></span></i>:&nbsp;&nbsp;
            <span tal:define="meetings python:here.portal_catalog(UID=here.getPreferredMeeting())">
            <span tal:condition="meetings">
                <tal:block define="meeting python:meetings[0];
                                   mayView python: tool.checkMayView(meeting)">
                <a tal:condition="mayView" tal:attributes="href meeting/getURL"
                   tal:content="python: tool.formatDate(meeting, prefixed=True)"></a>
                <span tal:condition="not: mayView" tal:content="meeting/Title">
                </span>
                </tal:block>
            </span>
            <span tal:condition="not: meetings">-
            </span>
          </span>
        </div>

        <tal:comment replace="nothing">Meeting where this item is presented</tal:comment>
        <div class="discreet">
          <i><span i18n:translate="presented_in_meeting">Presented in meeting</span></i>:&nbsp;&nbsp;
          <tal:hasMeeting condition="python: meeting">
            <tal:block define="mayView python: tool.checkMayView(meeting)">
              <a tal:condition="mayView"
                 tal:attributes="href meeting/absolute_url"
                 tal:content="python: tool.formatDate(meeting.getDate(), prefixed=True)"></a>
              <span tal:condition="not: mayView" tal:content="context/getLinkedMeetingTitle"></span>
            </tal:block>
          </tal:hasMeeting>
          <span tal:condition="python: not meeting">-</span>
        </div>
        
        <tal:comment replace="nothing">Other MeetingConfigs Clonable To</tal:comment>
        <div class="discreet"
             tal:condition="context/isClonableToOtherMeetingConfigs"
             tal:define="otherMCs context/getOtherMeetingConfigsClonableTo">
          <i><span i18n:translate="PloneMeeting_label_otherMeetingConfigsClonableTo"></span></i>:&nbsp;&nbsp;
             <span metal:use-macro="python: here.widget('otherMeetingConfigsClonableTo', mode='view')" />
             <span tal:condition="not: otherMCs">-</span>
        </div>
        <tal:comment replace="nothing">Privacy</tal:comment>
        <div class="discreet"
             tal:define="privacy context/getPrivacy"
             tal:condition="python: ('privacy' in usedAttrs) and privacy">
          <i class="#" tal:attributes="class string:item_privacy_${privacy}" tal:content="python: 'ip_%s' % privacy" i18n:translate=""></i>
        </div>
        <tal:comment replace="nothing">Oral question or item</tal:comment>
        <div class="discreet" tal:condition="python: 'oralQuestion' in usedAttrs">
         <tal:defines define="oq context/getOralQuestion">
          <tal:oral_question condition="oq">
           <i><img src="#" tal:attributes="src string:${portal_url}/oralQuestion.png">&nbsp;<span i18n:translate="this_item_is_an_oral_question">This item is an oral question</span></i>
          </tal:oral_question>
          <tal:not_oral_question condition="not: oq">
           <i><span i18n:translate="this_item_is_not_an_oral_question">This item is not an oral question</span></i>
          </tal:not_oral_question>
         </tal:defines>
        </div>
        <tal:comment replace="nothing">Item initiator</tal:comment>
        <div class="discreet" tal:condition="python: 'itemInitiator' in usedAttrs">
         <tal:defines define="itemInitiator context/getItemInitiator">
          <i><span i18n:translate="PloneMeeting_label_itemInitiator"></span></i>:&nbsp;&nbsp;
             <tal:block condition="itemInitiator">
              <span metal:use-macro="python: here.widget('itemInitiator', mode='view')" />
             </tal:block>
             <span tal:condition="not: itemInitiator">-</span>
         </tal:defines>
        </div>
        <tal:comment replace="nothing">Item signatures</tal:comment>
        <div class="discreet"
             tal:condition="python: meeting and ('signatures' in usedMeetingAttributes)">
          <tal:defines define="redefinedItemSignatures python: context.getItemSignatures(real=True).strip().replace('\n', '<br/>')">
          <i tal:attributes="class python: redefinedItemSignatures and 'highlightRedefinedValue' or ''"><span i18n:translate="meeting_signatures"></span></i>:&nbsp;&nbsp;
             <span tal:replace="structure python: context.getItemSignatures().strip().replace('\n', '<br/>')"/>
          </tal:defines>
        </div>
        </td>
      </tr>
    </table>

    <tal:comment replace="nothing">People (item attendees, signers and votes)</tal:comment>
    <metal:people use-macro="here/hs_macros/macros/itemPeople"/>

    <tal:comment replace="nothing">Description</tal:comment>
    <tal:field define="fieldName python: 'description'; ajaxEdit python:True">
       <metal:f use-macro="context/hs_macros/macros/viewContentField"/>
    </tal:field>
    <tal:comment replace="nothing">Detailed description</tal:comment>
    <tal:field define="fieldName python: 'detailedDescription'; ajaxEdit python:True">
       <metal:f use-macro="context/hs_macros/macros/viewContentField"/>
    </tal:field>
    <tal:comment replace="nothing">Budgetary informations</tal:comment>
    <fieldset tal:condition="python: 'budgetInfos' in usedAttrs and context.getBudgetRelated()">
      <legend i18n:translate="PloneMeeting_label_budgetInfos">Budgetary informations</legend>
      <div tal:replace="structure context/getBudgetInfos"></div>
    </fieldset>

    <tal:comment replace="nothing">Decision</tal:comment>
    <tal:field define="fieldName python: 'decision'; ajaxEdit python:True">
       <metal:f use-macro="context/hs_macros/macros/viewContentField"/>
    </tal:field>

    <tal:comment replace="nothing">Annexes and advices</tal:comment>
    <table width="100%" cellpadding="1" cellspacing="1"
           tal:define="meetingItem python: here;
                       hasAnnexes python: context.hasAnnexesWhere(decisionRelated=False);
                       hasAnnexesDecision python: context.hasAnnexesWhere(decisionRelated=True);
                       hasAdvices python: meetingConfig.getUseAdvices() and context.needsAdvices()" valign="top"
           tal:condition="python: hasAnnexes or hasAnnexesDecision or hasAdvices">
     <tr >
      <td width="50%" tal:condition="python: hasAnnexes or hasAnnexesDecision">
       <fieldset>
        <legend i18n:translate="existing_annexes">Annexes</legend>
        <table cellpadding="0" cellspacing="0">
         <tr>
           <td><metal:annexes use-macro="here/annexes_macros/macros/annexesIcons"/></td>
           <td tal:define="decisionRelated python:True"
               tal:condition="python: member.has_permission('PloneMeeting: Read decision annex', context) and hasAnnexesDecision">
             <metal:annexes use-macro="here/annexes_macros/macros/annexesIcons"/>
           </td>
         </tr>
        </table>
       </fieldset>
      </td>
      <td width="50%" tal:condition="python: not (hasAnnexes or hasAnnexesDecision) and hasAdvices">
       <tal:comment replace="nothing">
         Display an empty panel of annexes. Else, advices popup menus will go out of the screen.
       </tal:comment>
       <fieldset>
        <legend i18n:translate="existing_annexes">Annexes</legend>
        <div i18n:translate="no_annexes" class="discreet">No annexes</div>
       </fieldset>
      </td>
      <tal:comment replace="nothing">Advices</tal:comment>
      <td width="50%" tal:condition="hasAdvices">
       <fieldset>
        <legend i18n:translate="advices">Advices</legend>
        <metal:advices use-macro="here/advices_macros/macros/advicesIcons"/>
       </fieldset>
      </td>
     </tr>
    </table>

    <tal:comment replace="nothing">Observations</tal:comment>
    <tal:field define="fieldName python: 'observations'; ajaxEdit python:True">
       <metal:f use-macro="context/hs_macros/macros/viewContentField"/>
    </tal:field>

    <tal:comment replace="nothing">Fields that appear only if the item is defined in a configuration</tal:comment>
    <tal:itemInConfig condition="context/isDefinedInTool">
      <b><span i18n:translate="PloneMeeting_label_usages" />&nbsp:</b>
      <ul><li tal:repeat="usage context/getUsages" tal:content="usage" i18n:translate=""></li></ul><br />

      <tal:templateUsingGroups condition="python: 'as_template_item' in context.getUsages()">
        <b><span i18n:translate="PloneMeeting_label_templateUsingGroups" />&nbsp:</b><br />
        <span metal:use-macro="python: here.widget('templateUsingGroups', mode='view')" /><p>&nbsp;</p>
      </tal:templateUsingGroups>

      <tal:transitionsForRecurring condition="python: 'as_recurring_item' in context.getUsages()">
        <b><span i18n:translate="PloneMeeting_label_meetingTransitionInsertingMe" />&nbsp:</b><br />
        <span metal:use-macro="python: here.widget('meetingTransitionInsertingMe', mode='view')" /><p>&nbsp;</p>
      </tal:transitionsForRecurring>

      <a tal:define="config python: context.getParentNode().getParentNode()"
         tal:attributes="href python: config.absolute_url() + '?pageName=data#recItems'" i18n:translate="back"></a>
    </tal:itemInConfig>

    <tal:comment replace="nothing">Actions</tal:comment>
    <div tal:define="itemOrMeeting python: here">
        <div metal:use-macro="here/plonemeeting_actions/macros/ploneMeetingActions" />
    </div>
    <p></p>

    <tal:comment replace="nothing">Tasks</tal:comment>
    <tal:tasks condition="meetingConfig/getTasksMacro">
    <span tal:define="tasksMacro python: path(meetingConfig.getTasksMacro() + '|nothing')"
          tal:condition="python: tasksMacro and context.adapted().mayBeLinkedToTasks() and (member.has_role('TaskManager') or member.has_role('Owner', context))">
      <br/>
      <span metal:use-macro="tasksMacro"></span>
    </span>
    </tal:tasks>

    <tal:comment replace="nothing">Remember in session when this item was last accessed</tal:comment>
    <span tal:define="dummy python: tool.rememberAccess(context.UID())"></span>

    <div tal:replace="structure provider:plone.belowcontentbody" />

   </div>
 </metal:main>
</body>
</html>
