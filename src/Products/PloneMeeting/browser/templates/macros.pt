<tal:comment replace="nothing">
  This macro returns the edit view of an Archetypes field.
  It requires a REQUEST with key "fieldName".
</tal:comment>
<metal:editField define-macro="editField" i18n:domain="PloneMeeting"
                 tal:define="mode string:edit;
                             fieldName request/fieldName;
                             fields python: [context.getField(fieldName)];">
  <tal:showWarningWillInvalidateAdvices condition="python: context.meta_type == 'MeetingItem' and context.willInvalidateAdvices()">
  <dl class="portalMessage warning">
      <dt i18n:translate="" i18n:domain="plone">Warning</dt>
      <dd i18n:translate="warning_invalidate_advices_fastedit" i18n:domain="PloneMeeting"></dd>
  </dl>
  </tal:showWarningWillInvalidateAdvices>
  <img style="cursor:pointer;"
       i18n:attributes="title fastedit_save_and_exit_changes"
       title="Save changes and exit."
       tal:attributes="src string:$portal_url/save_and_exit.gif;
                       onClick python:'askAjaxChunk(\'hook_%s\', \'POST\', \'%s\', \'@@pm-macros\', \'saveField\', {}, getRichTextContent)' % (fieldName, context.absolute_url())"/>
  &nbsp;
  <img style="cursor:pointer;"
       i18n:attributes="title fastedit_save_changes"
       title="Save changes."
       tal:attributes="src string:$portal_url/save.gif;
                       onClick string:CKEDITOR.instances['${fieldName}'].execCommand('ajaxsave', 'saveCmd');"/>
  &nbsp;
  <img style="cursor: pointer;"
       i18n:attributes="title fastedit_cancel"
       title="Cancel edit."
       tal:attributes="src string:$portal_url/cancel_edit.png;
                       onClick python:'if (confirm(sure_to_cancel_edit)) {askAjaxChunk(\'hook_%s\', \'POST\', \'%s\', \'@@pm-macros\', \'simplyViewField\', {}, getRichTextContent)};;' % (fieldName, context.absolute_url())" />

  <form tal:attributes="id string:ajax_edit_$fieldName;" class="enableUnloadProtection enableAutoFocus enableUnlockProtection">

  <div tal:define="errors python:{};
                   schematas context/Schemata;
                   fieldsets python:[key for key in schematas.keys() if (key != 'metadata') and (schematas[key].editableFields(context, visible_only=True))];
                   default_fieldset python:(not schematas or schematas.has_key('default')) and 'default' or fieldsets[0];
                   fieldset request/fieldset|options/fieldset|default_fieldset;
                   dummy python:here.at_isEditable(fields);
                   dummyNotifyEditBegunEvent python: context.restrictedTraverse('@@pm-notify-event').notifyEditBegunEvent();
                   portal_type context/portal_type;
                   type_name portal_type;
                   lockable python:hasattr(context, 'wl_isLocked');
                   isLocked python:lockable and context.wl_isLocked();
                   css python:here.getUniqueWidgetAttr(fields, 'helper_css');
                   js python:here.getUniqueWidgetAttr(fields, 'helper_js')">
  <metal:editMacro use-macro="python:context.widget(fieldName, mode='edit', use_label=True)"/>
  </div>
  </form>
</metal:editField>

<tal:comment replace="nothing">
  This macro allows to edit a field with content.
  It requires the name of the field as "fieldName",
  which must correspond to a valid field on "context".
</tal:comment>
<metal:field define-macro="editContentField"
   tal:define="field python: context.getField(fieldName);
               isRich python: field.widget.getName() == 'RichWidget';
               isOptional field/optional|python:False;
               isUsed python: isOptional and fieldName in usedAttrs or not isOptional;"
   tal:condition="python: isUsed and member.has_permission(field.read_permission, context)">
  <metal:field use-macro="python:context.widget(fieldName, mode='edit')"/>
</metal:field>

<tal:comment replace="nothing">
  Save the content of an Archetypes field and return its consult view.
  Requires a REQUEST with keys "fieldName" and "fieldContent".
</tal:comment>
<metal:save define-macro="saveField" i18n:domain="PloneMeeting"
 tal:define="fieldName request/fieldName;
             field python: context.getField(fieldName);
             needToRefreshPage python: context.meta_type=='MeetingItem' and context.willInvalidateAdvices();
             dummy python: context.setFieldFromAjax(fieldName, request.get('fieldContent'));
             mayEdit python: member.has_permission(field.write_permission, context);">
 <metal:view use-macro="context/@@pm-macros/viewField"/>
</metal:save>

<tal:comment replace="nothing">
  Save the content of an Archetypes field and return its edit view.
  Requires a REQUEST with keys "fieldName" and "fieldContent".
</tal:comment>
<metal:save define-macro="saveAndEditField" i18n:domain="PloneMeeting"
 tal:define="fieldName request/fieldName;
             field python: context.getField(fieldName);
             needToRefreshPage python: context.meta_type=='MeetingItem' and context.willInvalidateAdvices();
             dummy python: context.setFieldFromAjax(fieldName, request.get('fieldContent'));
             mayEdit python: member.has_permission(field.write_permission, context);">
 <metal:view use-macro="context/@@pm-macros/editField"/>
</metal:save>

<tal:comment replace="nothing">Displays changes performed on a field.</tal:comment>
<metal:field define-macro="viewFieldVersion" i18n:domain="PloneMeeting"
 tal:define="fieldName request/fieldName;
             field python: context.getField(fieldName);
             changes python: request.get('changes', 'False') == 'True';
             mayEdit python: member.has_permission(field.write_permission, context)">
 <metal:view use-macro="context/@@pm-macros/viewField"/>
</metal:field>
<tal:comment replace="nothing">Displays the field, nothing else.</tal:comment>
<metal:field define-macro="simplyViewField" i18n:domain="PloneMeeting"
 tal:define="fieldName request/fieldName;
             field python: context.getField(fieldName);
             dummyNotifyEditCancelledEvent python: context.restrictedTraverse('@@pm-notify-event').notifyEditCancelledEvent();
             mayEdit python: member.has_permission(field.write_permission, context)">
 <metal:view use-macro="context/@@pm-macros/viewField"/>
</metal:field>



<tal:comment replace="nothing">
  This macro allows to view the content of an ajax-editable field.
</tal:comment>

<div metal:define-macro="viewField"
     tal:define="hookId python: 'hook_%s' % fieldName;
                 changes changes|python: False;
                 jsUrl context/absolute_url;
                 jsParams python: '\'fieldName\':\'%s\'' % fieldName;
                 jsCall python:'askAjaxChunk(\'%s\', \'GET\', \'%s\', \'@@pm-macros\'' % (hookId, jsUrl);
                 jsEdit python: '%s,\'editField\',{%s},null,initRichTextField)' % (jsCall, jsParams);
                 jsChanges python: '%s,\'viewFieldVersion\',{%s,\'changes\':\'True\'})' % (jsCall, jsParams);
                 jsView python: '%s,\'viewFieldVersion\',{%s,\'changes\':\'False\'})' % (jsCall, jsParams);
                 needToRefreshPage needToRefreshPage|nothing;"
     style="position: relative"
     tal:attributes="id hookId;">

<script type='text/javascript'>
function refreshPageIfNeeded(){
document.location.reload(true);
}
</script>

 <fieldset>
  <legend>
    <div style="display: inline"
         class="collapsible active"
         tal:attributes="id string:${hookId}_toggle;
                         onclick string:toggleDetails('${hookId}_content', toggle_parent_active=true, parent_tag=${hookId}_toggle);">
      <span tal:replace="python: field.widget.Label(context)"></span>
    </div>
    <img style="cursor:pointer" tal:condition="mayEdit"
         tal:attributes="src string:$portal_url/edit.png;
                         onClick jsEdit;
                         onload python: needToRefreshPage and 'javascript:refreshPageIfNeeded()' or ''"/>
    <tal:history define="hasHistory python: context.hasHistory(fieldName)" condition="hasHistory">
    <img style="cursor:pointer" title="history_changes" i18n:attributes="title"
         tal:condition="not: changes"
         tal:attributes="src string:$portal_url/changes.gif; onClick jsChanges"/>
    <img style="cursor:pointer" title="history_last" i18n:attributes="title"
         tal:condition="changes"
         tal:attributes="src string:$portal_url/view.gif; onClick jsView"/>
    </tal:history>
  </legend>

  <div tal:attributes="id string:${hookId}_content">
   <div tal:replace="structure python: context.getFieldVersion(fieldName, changes)"></div>
  </div>
 </fieldset>
</div>

<tal:comment replace="nothing">
  This macro allows to view a field with content.
  It requires the name of the field as "fieldName", which must
  correspond to a valid field on "context".
  "ajaxEdit" indicates if this field can be ajax-edited.
</tal:comment>
<metal:field define-macro="viewContentField" i18n:domain="PloneMeeting"
     tal:define="field python: context.getField(fieldName);
                 isRich python: field.widget.getName() == 'RichWidget';
                 isOptional field/optional|python:False;
                 isUsed python: not isOptional or (isOptional and fieldName in usedAttrs);
                 ajaxEdit ajaxEdit|nothing;
                 mayEdit python: ajaxEdit and member.has_permission(field.write_permission, context) and not context.restrictedTraverse('@@plone_lock_info').is_locked_for_current_user()"
     tal:condition="python: isUsed and field.widget.visible and field.widget.visible and field.widget.testCondition(context.getParentNode(), context.getParentNode(), context) and member.has_permission(field.read_permission, context)">
  <tal:rich condition="python: isRich">
    <metal:view use-macro="context/@@pm-macros/viewField"/>
  </tal:rich>
  <tal:notrich condition="python: not isRich">
    <metal:view use-macro="context/widgets/field/macros/view" />
  </tal:notrich>
</metal:field>

<tal:comment replace="nothing">
  This macro manage the takenOverBy attribute of MeetingItem viewed on different views.
  It manage the fact that it can be Ajax-edited in several context.
  This macro need :
  ajaxEdit : a relevant info about the fact that we will activate the Ajax edition
  meetingItem : the relevant MeetingItem
</tal:comment>
<metal:takenOverBy define-macro="takenOverBy" i18n:domain="PloneMeeting"
                    tal:define="mayEdit python: ajaxEdit==False and False or meetingItem.adapted().mayTakeOver();
                                memberId member/getId;
                                takenOverBy meetingItem/getTakenOverBy;
                                takenOverByCurrentUser python: takenOverBy == memberId;">
  <span id="marker_toggle_takenoverby_UID#"
        tal:attributes="id string:marker_toggle_takenoverby_$UID;"
        tal:define="UID meetingItem/UID;
                    baseUrl meetingItem/absolute_url;"
        tal:condition="mayEdit">
    <span class="takenOverByEditable"
          tal:condition="takenOverBy"
          title="taken_over_by_yes_edit"
          i18n:attributes="title"
          tal:define="onClickPattern python: memberId != takenOverBy and 'if (confirm(sure_to_take_over)) {%s};;' or '%s';
                      onClick python: 'asyncToggleIcon(\''+UID+'\', baseUrl=\'' + baseUrl + '\', viewName=\'@@toggle_item_taken_over_by?takenOverByFrom='+takenOverBy+'\', baseSelector=\'#marker_toggle_takenoverby_\')';"
          tal:attributes="onClick python: onClickPattern % onClick;
                          class python: 'takenOverByEditable ' + (takenOverByCurrentUser and 'takenOverByCurrentUser' or 'takenOverByOtherUser')"
          i18n:translate="">Taken over by <span i18n:name="fullname" tal:content="python: tool.getUserName(takenOverBy)">
          Full name</span>
    </span>

    <span class="takenOverByEditable takenOverByNobody"
          tal:condition="not: takenOverBy"
          title="taken_over_by_no_edit"
          i18n:attributes="title"
          tal:attributes="onClick python: 'asyncToggleIcon(\''+UID+'\', baseUrl=\'' + baseUrl + '\', viewName=\'@@toggle_item_taken_over_by?takenOverByFrom='+takenOverBy+'\', baseSelector=\'#marker_toggle_takenoverby_\')'"
          i18n:translate="">
        (Nobody)
    </span>
  </span>
  <tal:canNotEdit condition="not: mayEdit">
    <span class="#"
          style="cursor: help;"
          tal:condition="takenOverBy"
          title="taken_over_by_yes"
          i18n:attributes="title"
          tal:attributes="class python: takenOverByCurrentUser and 'takenOverByCurrentUser' or 'takenOverByOtherUser'"
          i18n:translate="">Taken over by <span i18n:name="fullname" tal:content="python: tool.getUserName(takenOverBy)">
          Full name</span>
    </span>
    <span class="takenOverByNobody"
          style="cursor: help;"
          tal:condition="not: takenOverBy"
          title="taken_over_by_no"
          i18n:attributes="title"
          i18n:translate="">
        (Nobody)
    </span>
  </tal:canNotEdit>
</metal:takenOverBy>

<tal:comment replace="nothing">
  This macro manage the budgetary informations, so the 2 fields
  MeetingItem.budgetRelated and MeetingItem.budgetInfos.
</tal:comment>
<metal:budgetInfos define-macro="budgetInfos"
                   i18n:domain="PloneMeeting"
                   tal:define="mayEdit python: member.has_permission('PloneMeeting: Write budget infos', context);
                               budgetRelated context/getBudgetRelated;">
  <span id="marker_toggle_budgetrelated_UID#"
        tal:attributes="id string:marker_toggle_budgetrelated_$UID;"
        tal:define="UID context/UID;
                    baseUrl context/absolute_url;"
        tal:condition="mayEdit">
    <img class="budgetRelatedEditable"
         tal:condition="budgetRelated"
         title="budget_related_yes_img_title_edit"
         name="budgetRelatedNo"
         i18n:attributes="title"
         tal:attributes="src string:$portal_url/budgetRelatedYes.png;
                         onClick python: 'asyncToggleIcon(\''+UID+'\', baseUrl=\'' + baseUrl + '\', viewName=\'@@toggle_budget_related\', baseSelector=\'#marker_toggle_budgetrelated_\')'"/>
    <span tal:condition="budgetRelated"
          class="discreet budgetRelated"
          i18n:translate="budget_related_yes_edit">This item is budget related, check 'Budgetary informations' here under.</span>

    <img class="budgetRelatedEditable"
         tal:condition="not: budgetRelated"
         title="budget_related_no_img_title_edit"
         name="budgetRelatedYes"
         i18n:attributes="title"
         tal:attributes="src string:$portal_url/budgetRelatedNo.png;
                         onClick python: 'asyncToggleIcon(\''+UID+'\', baseUrl=\'' + baseUrl + '\', viewName=\'@@toggle_budget_related\', baseSelector=\'#marker_toggle_budgetrelated_\')'"/>
    <span tal:condition="not: budgetRelated"
          class="discreet notBudgetRelated"
          i18n:translate="budget_related_no_edit">This item is not budget related.</span>
  </span>

  <tal:notMayEdit condition="not: mayEdit">
    <tal:budgetRelated condition="budgetRelated">
      <img tal:attributes="src string:$portal_url/budgetRelatedYes.png"/>
      <span class="discreet budgetRelated"
            i18n:translate="budget_related_yes_view">This item is budget related, check 'Budgetary informations' here under.</span>
    </tal:budgetRelated>
    <tal:notBudgetRelated condition="not: budgetRelated">
      <img tal:condition="not: budgetRelated"
           tal:attributes="src string:$portal_url/budgetRelatedNo.png"/>
      <span class="discreet notBudgetRelated"
            i18n:translate="budget_related_no_view">This item is not budget related.</span>
    </tal:notBudgetRelated>
  </tal:notMayEdit>
</metal:budgetInfos>

<tal:comment replace="nothing">
  This macro displays the previous advice_type of an advice that is 'asked_again'.
</tal:comment>
<metal:previousAdviceType define-macro="previousAdviceType" i18n:domain="PloneMeeting">
  <tal:defines define="adviceStyle python: context.portal_plonemeeting.getMeetingConfig(context).getAdviceStyle();
                       pr python: context.portal_repository;
                       previous python: pr.retrieve(context, (pr.getHistoryMetadata(context).nextVersionId -1)).object">
    (<img tal:attributes="src string:$portal_url/advice_${adviceStyle}_${previous/advice_type}.png;
                          title string:${previous/advice_type};"
          i18n:attributes="title" title=""/>
     <span tal:content="string:${previous/advice_type}" i18n:translate="">Previous advice type</span>)
  </tal:defines>
</metal:previousAdviceType>

<tal:comment replace="nothing">
  This macro displays a link back to the item from an child (advice or annex for example).
</tal:comment>
<p metal:define-macro="backToItem" i18n:domain="PloneMeeting" class="backToItem">
  <a href='../#adviceAndAnnexes'>
    <img src="back_to.gif" tal:attributes="src string:${portal_url}/back_to.gif" />&nbsp;<span i18n:translate="">Back to the item</span></a>
</p>

<tal:comment replace="nothing">
  This macro displays a link back to the MeetingConfig from a view called onto it (same context)
</tal:comment>
<p metal:define-macro="backToMeetingConfig" i18n:domain="PloneMeeting">
  <a href=''>
    <img src="back_to.gif" tal:attributes="src string:${portal_url}/back_to.gif" />&nbsp;<span i18n:translate="">Back to the MeetingConfig</span></a>
</p>

<div id="meeting_users_"
     metal:define-macro="itemPeople" i18n:domain="PloneMeeting"
     tal:define="usedAttrs usedAttrs|meetingConfig/getUsedItemAttributes;
                 meeting context/getMeeting;
                 usedMeetingAttributes usedMeetingAttributes|meetingConfig/getUsedMeetingAttributes">
<form id="itemPeopleForm" name="itemPeopleForm" method="post">
<table tal:define="allUsers meeting/getAllUsedHeldPositions;
                   showVotes context/showVotes;
                   usedVoteValues meetingConfig/getUsedVoteValues;
                   excused meeting/getExcused;
                   absents meeting/getAbsents;
                   itemSignatories context/getItemSignatories;
                   realItemSignatories python: context.getItemSignatories(real=True);
                   meetingSignatories meeting/getSignatories;
                   itemAttendees context/getAttendees;
                   itemAbsents context/getItemAbsents;
                   itemExcused context/getItemExcused;
                   itemNonAttendees context/getItemNonAttendees;
                   showExcused python: 'excused' in usedMeetingAttributes or excused;
                   showAbsents python: 'absents' in usedMeetingAttributes or absents or itemAbsents;
                   showSignatories python: 'signatories' in usedMeetingAttributes or itemSignatories;
                   showNonAttendees python: 'nonAttendees' in usedMeetingAttributes or itemNonAttendees;
                   voters python: [];
                   global showSave python:False;
                   global showRefresh python: False;
                   error request/error | python:'';
                   secret context/getVotesAreSecret;
                   isManager python: tool.isManager(context);"
       id="meeting_users" class="listing" cellspacing="0" cellpadding="0">
  <tal:comment replace="nothing">Column headers</tal:comment>
  <thead>
  <tr valign="top">
    <th class="nosort" i18n:translate="item_specific"></th>
    <th class="nosort" i18n:translate="is_attendee"></th>
    <th class="nosort" tal:condition="showExcused" i18n:translate="is_excused">Excused?</th>
    <th class="nosort" tal:condition="showAbsents" i18n:translate="is_absent">Absent?</th>
    <th class="nosort" tal:condition="showSignatories" i18n:translate="is_signer">Signer?</th>
    <th class="nosort" tal:condition="showNonAttendees" i18n:translate="is_non_attendee">Non attendee?</th>
    <th class="nosort" tal:condition="showVotes" i18n:translate="is_voter"></th>
    <th class="nosort" tal:condition="python: showVotes and not secret" i18n:translate="vote_value"></th>
    <th class="nosort" tal:condition="python: showVotes and secret" align="left">
      <i style="color:blue">
      <span i18n:translate="voter_count">
        <span i18n:name="numberOfVoters" tal:content="python:len(voters)"></span>
      </span> (<span i18n:translate="PloneMeeting_label_votesAreSecret"></span>)
      </i><br/>
      <tal:secret define="global showSave context/mayEditVotes;
                          mayEditVotes showSave;
                          mayConsultVotes context/mayConsultVotes"
                  repeat="voteValue usedVoteValues">
        <span i18n:translate="" tal:content="python: 'vote_value_%s' % voteValue"></span>:
        <span tal:define="voteCount python: context.getVoteCount(voteValue);
                          widgetName python: 'vote_count_%s' % voteValue">
          <tal:comment replace="nothing">Display an editable number of votes</tal:comment>
          <input tal:condition="mayEditVotes" type="text" size="2"
                 tal:attributes="name widgetName;
                                 value python: error and request.get(widgetName,0) or voteCount"/>

          <tal:comment replace="nothing">Display the number of votes</tal:comment>
          <span tal:condition="python: mayConsultVotes and not mayEditVotes" tal:content="voteCount"></span>

          <tal:comment replace="nothing">Display nothing</tal:comment>
          <span tal:condition="python: not mayConsultVotes and not mayEditVotes"
                i18n:translate="vote_value_not_consultable"></span>
        </span>
      </tal:secret>
    </th>
  </tr>
  </thead>
  <tbody>
  <tal:loop repeat="mUser allUsers">
  <tr tal:define="aUid mUser/UID;
                  isPresent python: aUid in itemAttendees"
      tal:attributes="class python: aUid in itemNonAttendees and 'item-non-attendee' or ''">
     <td><b tal:content="mUser/get_short_title"></b></td>
     <td align="center">
       <tal:comment replace="nothing">The user is present</tal:comment>
       <span tal:condition="isPresent" class="fa people-checked" ></span>
 
       <tal:comment replace="nothing">Button for byebying a user</tal:comment>
       <a href="#" class="link-overlay-pm" tal:attributes="href string:item_byebye_attendee_form?person_uid=${aUid}"
          tal:condition="python:context._mayChangeAttendees() and isPresent">
        <span class="fa people-edit-itemabsent people-action" title="person_byebye" i18n:attributes="title"
            tal:attributes="id python: 'byebye_%s' % aUid;
                            name  python: 'byebye_%s' % aUid;" />
       </a>
     </td>
 
     <td align="center" tal:condition="showExcused">
       <span tal:condition="python: aUid in excused" class="fa people-checked" ></span>
       <tal:comment replace="nothing">Show "excused" icon if the user was excused for this item</tal:comment>
       <tal:left condition="python: aUid in itemExcused">
 
        <span tal:condition="python: aUid in itemExcused"
                 class="tooltipster-meeting-item-not-present fa people-left people-action"
                 tal:attributes="data-base_url string:${context/absolute_url};
                                 data-not_present_uid string:${aUid};
                                 data-not_present_type string:excused;">
        </span>

         <tal:comment replace="nothing">Remove info user being an item excused</tal:comment>
         <a href="#" class="link-overlay-pm" tal:attributes="href string:item_welcome_attendee_form?person_uid=${aUid}"
            tal:condition="python: context._mayChangeAttendees()">
          <span class="fa people-remove-left people-action" title="person_welcome" i18n:attributes="title"
              tal:attributes="id python: 'welcome_%s' % aUid;
                              name  python: 'welcome_%s' % aUid;" />
         </a>
       </tal:left>

     </td>
 
     <td align="center" tal:condition="showAbsents">
       <span tal:condition="python: aUid in absents" class="fa people-checked" ></span>
       <tal:comment replace="nothing">Show "absent" icon if the user was absent for this item</tal:comment>
       <tal:left condition="python: aUid in itemAbsents">
 
        <span tal:condition="python: aUid in itemAbsents"
                 class="tooltipster-meeting-item-not-present fa people-left people-action"
                 tal:attributes="data-base_url string:${context/absolute_url};
                                 data-not_present_uid string:${aUid};
                                 data-not_present_type string:absent;">
        </span>

         <tal:comment replace="nothing">Remove info user being an item absent</tal:comment>
         <a href="#" class="link-overlay-pm" tal:attributes="href string:item_welcome_attendee_form?person_uid=${aUid}"
            tal:condition="python: context._mayChangeAttendees()">
          <span class="fa people-remove-left people-action" title="person_welcome" i18n:attributes="title"
              tal:attributes="id python: 'welcome_%s' % aUid;
                              name  python: 'welcome_%s' % aUid;" />
         </a>
       </tal:left>

     </td>
 
     <td align="center"
         tal:condition="showSignatories">

      <tal:meetingSigner condition="python: aUid not in realItemSignatories and aUid in meetingSignatories and aUid in itemSignatories">
       <span class="signatory-checked" title="Original meeting signatory" i18n:attributes="title">
         <span class="fa people-checked"></span>
         <span tal:content="python: meetingSignatories[aUid]" />
       </span>
      </tal:meetingSigner>
      <tal:replacedMeetingSigner condition="python: aUid in meetingSignatories and aUid not in itemSignatories">
       (<span class="signatory-checked" title="Meeting signatory replaced for this item" i18n:attributes="title">
        <span class="fa people-checked"></span>
        <span tal:content="python: meetingSignatories[aUid]" />
       </span>)
      </tal:replacedMeetingSigner>
      <tal:replacerMeetingSigner condition="python: aUid in realItemSignatories">
       <span tal:condition="python: aUid in itemSignatories"
                class="tooltipster-meeting-item-signatories fa people-signatory-replacer people-action"
                tal:attributes="data-base_url string:${context/absolute_url};
                                data-signatory_uid string:${aUid};">
        <span class="item-signatory-replacer-signature-number" tal:content="python: realItemSignatories[aUid]" />
       </span>

       <tal:comment replace="nothing">Remove info user being an item signatory</tal:comment>
       <a href="#" class="link-overlay-pm" tal:attributes="href string:item_remove_redefined_signatory_form?person_uid=${aUid}"
          tal:condition="python: context._mayChangeAttendees()">
        <span class="fa people-remove-redefined-signatory people-action" title="Remove attendee from signatory defined for this item" i18n:attributes="title" />
       </a>

      </tal:replacerMeetingSigner>

      <tal:comment replace="nothing">Button for redefining a signatory</tal:comment>
      <a href="#" class="link-overlay-pm" tal:attributes="href string:item_redefine_signatory_form?person_uid=${aUid}"
         tal:condition="python:context._mayChangeAttendees() and isPresent and (aUid not in itemSignatories and aUid not in meetingSignatories)">
       <span class="fa people-edit-signatory people-action" title="Define this attendee as signatory for this item" i18n:attributes="title"
           tal:attributes="id python: 'redefine_signatory_%s' % aUid;
                           name  python: 'redefine_signatory_%s' % aUid;" />
      </a>
     </td>

     <td align="center"
         tal:condition="showNonAttendees">

       <tal:comment replace="nothing">Button for setting attendee to nonAttendee</tal:comment>
       <a href="#" class="link-overlay-pm" tal:attributes="href string:item_byebye_nonattendee_form?person_uid=${aUid}"
          tal:condition="python:context._mayChangeAttendees() and aUid not in itemNonAttendees">
        <span class="fa people-edit-itemabsent people-action" title="person_byebye" i18n:attributes="title"
            tal:attributes="id python: 'byebye_nonattendee_%s' % aUid;
                            name  python: 'byebye_nonattendee_%s' % aUid;" />
       </a>
       <tal:comment replace="nothing">Show "nonAttendee" icon if the user was nonAttendee for this item</tal:comment>
       <tal:left condition="python: aUid in itemNonAttendees">

        <span tal:condition="python: aUid in itemNonAttendees"
                 class="tooltipster-meeting-item-not-present fa people-left people-action"
                 tal:attributes="data-base_url string:${context/absolute_url};
                                 data-not_present_uid string:${aUid};
                                 data-not_present_type string:non_attendee;">
        </span>

        <tal:comment replace="nothing">Remove info user being an item nonAttendee</tal:comment>
        <a href="#" class="link-overlay-pm" tal:attributes="href string:item_welcome_nonattendee_form?person_uid=${aUid}"
           tal:condition="python: context._mayChangeAttendees()">
         <span class="fa people-remove-left people-action" title="nonattendee_welcome" i18n:attributes="title"
             tal:attributes="id python: 'welcome_%s' % aUid;
                             name  python: 'welcome_%s' % aUid;" />
        </a>
       </tal:left>

     </td>

     <td align="center" tal:condition="showVotes">
       <span tal:condition="python: aUid in voters" class="fa people-checked" ></span>
     </td>
     <td align="center" tal:condition="python: showVotes and not secret">
     <tal:showVote condition="python: (aUid in voters) and isPresent">
     <tal:votes define="mayConsultVote python: mUser.adapted().mayConsultVote(member, context);
                        mayEditVote python: mUser.adapted().mayEditVote(member, context);
                        voterId mUser/getId;
                        voteValue python: context.getVoteValue(voterId);
                        global showSave python: mayEditVote and True or showSave;
                        global showRefresh python: not mayEditVote and (mayConsultVote and True or showRefresh) or False">

       <tal:comment replace="nothing">For users that can't consult neither edit the vote value</tal:comment>
       <span id="vote-not_consultable" tal:condition="python: not mayConsultVote and not mayEditVote"
             i18n:translate="vote_value_not_consultable"></span>
       <tal:comment replace="nothing">For users that can consult the vote value but not edit it.</tal:comment>
       <span tal:condition="python: mayConsultVote and not mayEditVote" i18n:translate=""
             tal:content="python: 'vote_value_%s' % voteValue"></span>
       <tal:comment replace="nothing">For users that can consult and edit the vote.</tal:comment>
       <tal:editField condition="python: mayConsultVote and mayEditVote"
                      define="widgetName python: 'vote_value_%s' % voterId">
         <tal:radio repeat="usedVoteValue usedVoteValues">
           <tal:input define="widgetId python:'vote_value_%s_%s' % (usedVoteValue, voterId)">
           <input type="radio" class="noborder" value="not_yet"
                  tal:attributes="name widgetName; id widgetId; value usedVoteValue;
                                  checked python: voteValue == usedVoteValue"/>
           <label tal:define="used_vote_value python: usedVoteValue.replace('-', '_')"
                  tal:attributes="for widgetId;
                                  id python: 'vote-%s' % used_vote_value"
                  tal:content="python: 'vote_value_%s' % used_vote_value"
                  i18n:translate=""></label>&nbsp;&nbsp;
           </tal:input>
         </tal:radio>
       </tal:editField>
     </tal:votes>
     </tal:showVote>
     </td>
     <td align="center" tal:condition="python: showVotes and secret">-
     </td>
  </tr>
  </tal:loop>
  <tr tal:condition="not:allUsers">
   <td colspan="9">
     <span class="discreet no-attendees" i18n:translate="">Nothing to display.</span>
   </td>
  </tr>
  <tr tal:condition="showVotes">
    <th colspan="7" tal:define="maySwitchVotes context/maySwitchVotes">
      <tal:comment replace="nothing">Switch mode (secret / not secret)</tal:comment>
      <img style="cursor:pointer;" title="switch_votes" i18n:attributes="title" align="right"
           tal:condition="python: isManager and maySwitchVotes"
           tal:attributes="src string:$portal_url/switch.gif;
                           onClick python:'switchVotes(\'%s\', \'%s\')' % (context.absolute_url(), secret)"/>
      <img style="cursor:help;" title="switch_votes_why_cannot" i18n:attributes="title" align="right"
           tal:condition="python: isManager and not maySwitchVotes"
           tal:attributes="src string:$portal_url/switch_not_allowed.gif;"/>
      <tal:comment replace="nothing">Set 'yes' for everybody</tal:comment>
      <img style="cursor:pointer;" title="update_votes_yes" i18n:attributes="title"
           tal:condition="python: showSave" align="right"
           tal:attributes="src string:$portal_url/yes.gif;
                           onClick python:'saveItemPeopleInfos(\'%s\', true)' % context.absolute_url()"/>
      <tal:comment replace="nothing">Save votes</tal:comment>
      <img style="cursor:pointer" title="save" i18n:attributes="title"
           tal:condition="python: showSave" align="right"
           tal:attributes="src string:$portal_url/save.gif;
                           onClick python:'saveItemPeopleInfos(\'%s\')' % context.absolute_url()"/>
      <tal:comment replace="nothing">Refresh votes</tal:comment>
      <img style="cursor:pointer;" title="refresh_votes" i18n:attributes="title"
           tal:condition="showRefresh" align="right"
           tal:attributes="src string:$portal_url/refresh.gif;
                           onClick python:'refreshVotes(\'%s\')' % context.absolute_url()"/>
      <i tal:condition="error" tal:content="request/peopleMsg"
         style="color:red; margin-right: 1em;"></i>
    </th>
  </tr>
  <tbody>
</table>
</form>
<script>
 pmCommonOverlays();
</script>
</div>

<tal:comment replace="nothing">
  This Ajax-called macro displays an object's history.
  XXX WARNING this is no more use and will be totaly removed while removing the PM content historisation functionnality.
  XXX WARNING For now, this is adapted in browser/templates/content_history.pt
</tal:comment>
<!--metal:history define-macro="history" i18n:domain="PloneMeeting"
      tal:define="startNumber request/startNumber|python:0;
                  startNumber python: int(startNumber);
                  batchSize   python: int(request.get('maxPerPage'));
                  historyInfo python: context.getHistory(startNumber, batchSize=batchSize);
                  objs        historyInfo/events;
                  totalNumber historyInfo/totalNumber;
                  ajaxHookId  python: context.UID() + '_history';
                  navBaseCall python: 'askObjectHistory(\'%s\',\'%s\',%d,**v**)' % (ajaxHookId, context.absolute_url(), batchSize)">

  <tal:comment replace="nothing">Table containing the history</tal:comment>
  <tal:history condition="objs">
  <metal:nav use-macro="here/@@navigate-macros/simple"/>
  <table class="listing nosort">
    <tr i18n:domain="plone">
      <th i18n:translate="listingheader_action"/>
      <th i18n:translate="listingheader_performed_by"/>
      <th i18n:translate="listingheader_date_and_time"/>
      <th i18n:translate="history_details" i18n:domain="PloneMeeting"/>
    </tr>
    <tal:event repeat="event objs">
    <tr tal:define="odd repeat/event/odd;
                    rhComments event/comments|nothing;
                    state event/review_state|nothing;
                    isDataChange python: event['action'] == '_datachange_'"
        tal:attributes="class python:test(odd, 'even', 'odd')" valign="top">
      <td tal:condition="isDataChange">
        <span i18n:translate="data_change" i18n:domain="imio.history"></span>
        <img tal:condition="python: member.has_role('Manager')" style="cursor:pointer"
             tal:attributes="src string:$portal_url/delete_icon.png;
                             onClick python: 'deleteEvent(\'%s\', \'%s\')' % (context.UID(), event['time'])"/>
      </td>
      <td tal:condition="not: isDataChange" tal:content="event/action" i18n:translate=""/>
      <td tal:define="actorid python:event.get('actor');
                      actor python:context.portal_membership.getMemberInfo(actorid);
                      fullname actor/fullname|nothing;
                      username actor/username|nothing"
          tal:content="python:fullname or username or actorid"/>
      <td tal:content="python:context.restrictedTraverse('@@plone').toLocalizedTime(event['time'],long_format=True)"/>
      <td tal:condition="not: isDataChange"><tal:comment condition="rhComments" tal:content="structure rhComments"/>
        <tal:noComment condition="not: rhComments" i18n:translate="no_comments" i18n:domain="plone"/></td>
      <td tal:condition="isDataChange">
        <tal:comment replace="nothing">
          Display the previous values of the fields whose value were modified in this change.</tal:comment>
        <table class="dataChanges" width="100%">
          <tr>
            <th align="left" width="30%" i18n:translate="modified_field"></th>
            <th align="left" width="70%" i18n:translate="previous_value"></th>
          </tr>
          <tr tal:repeat="change event/changes/items" valign="top">
            <tal:change define="field python:context.getField(change[0])">
            <td tal:content="python: context.translate(field.widget.label_msgid, domain=field.widget.i18n_domain)"></td>
            <td tal:content="structure python: change[1]"></td>
            </tal:change>
          </tr>
        </table>
      </td>
    </tr>
    </tal:event>
  </table>
  </tal:history>
</metal:history-->

<tal:comment replace="nothing">Object history
XXX WARNING this is no more use and will be totaly removed while removing the PM content historisation functionnality</tal:comment>
<!--tal:history metal:define-macro="objectHistory" i18n:domain="PloneMeeting"
    tal:define="expanded python: request.get('objectHistory', 'collapsed') == 'expanded';
                historyMaxPerPage python: 6;"
    tal:condition="context/hasHistory">
  <img align="left" onClick="toggleBooleanCookie('objectHistory')"
       tal:attributes="src python: expanded and 'treeExpanded.gif' or 'treeCollapsed.gif'"
       id="objectHistory_img"/>&nbsp;
  <i i18n:translate="label_history" i18n:domain="plone"></i><br/>
  <span id="objectHistory"
        tal:attributes="style python:test(expanded, 'display:block', 'display:none')">
   <div tal:define="ajaxHookId python: context.UID() + '_history';"
        tal:attributes="id ajaxHookId">
      <script language="javascript" tal:content="python: 'askObjectHistory(\'%s\',\'%s\',%d,0)' % (ajaxHookId, context.absolute_url(), historyMaxPerPage)">
      </script>
   </div>
  </span>
</tal:history-->

<tal:comment replace="nothing">Move up/down/top/bottom macro
Needs moveUrl, firstId, lastId, obj</tal:comment>
<metal:moveUpDown define-macro="moveUpDown" i18n:domain="PloneMeeting" tal:define="objId obj/getId">
    <!-- Move the obj bottom -->
    <a tal:condition="python: obj.id != lastId"
       tal:attributes="href python: moveUrl % ('bottom', objId);">
        <img src="arrowBottom.png" tal:attributes="src string:${portal_url}/arrowBottom.png;" title="title_move_item_bottom" i18n:attributes="title" />
    </a>
    <!-- Move the group down -->
    <a tal:condition="python: obj.id != lastId"
       tal:attributes="href python: moveUrl % ('down', objId);">
      <img src="arrowDown.png" tal:attributes="src string:${portal_url}/arrowDown.png;" title="title_move_item_down" i18n:attributes="title" />
    </a>
    <!-- Move the group up -->
    <a tal:condition="python: obj.id != firstId"
       tal:attributes="href python: moveUrl % ('up', objId);">
      <img src="arrowUp.png" tal:attributes="src string:${portal_url}/arrowUp.png;" title="title_move_item_up" i18n:attributes="title" />
    </a>
    <!-- Move the group top-->
    <a tal:condition="python: obj.id != firstId"
       tal:attributes="href python: moveUrl % ('top', objId);">
        <img src="arrowTop.png" tal:attributes="src string:${portal_url}/arrowTop.png;" title="title_move_item_top" i18n:attributes="title" />
    </a>
</metal:moveUpDown>

<tal:comment replace="nothing">In case we are using a popup, add a button 'Close' at the
bottom so the user can use it to close current popup as well as the cross up right.
The name is form.button.cancel because it correspond to the overlay close selector.</tal:comment>
<metal:closeButton define-macro="closeButtonMacro" i18n:domain="PloneMeeting">
    <div align="center"
         tal:condition="python: 'ajax_load' in context.REQUEST">
        <br />
        <input type="button"
               name="form.buttons.cancel"
               value="Close"
               i18n:attributes="value"
               class="apButton" />
    </div>
</metal:closeButton>

<metal:displayBudgetInfos define-macro="displayBudgetInfos" i18n:domain="PloneMeeting">
<tal:field define="fieldName python: 'budgetInfos';
                   ajaxEdit python:True;
                   usedAttrs python: ('budgetInfos', );
                   member context/@@plone_portal_state/member;
                   portal_url context/@@plone_portal_state/portal_url">
   <metal:f use-macro="context/@@pm-macros/viewContentField"/>
</tal:field>
</metal:displayBudgetInfos>

<metal:additionalInformations define-macro="additionalInformations" i18n:domain="PloneMeeting">
<tal:comment replace="nothing">Macro used to display additional informations coming from obj schema
non metadata fields.  We receive 'obj' and 'excludedFields' that is a list of fields not to display information of.
This works for an AT and for a DX.</tal:comment>
<tal:defines define="isDexterity python: obj.getTypeInfo().meta_type == 'Dexterity FTI';">
  <tal:dx condition="isDexterity">
    <tal:loop
        define="view python: obj.restrictedTraverse('view');
                dummy python: view.update();
                groups view/groups;
                widgets python: [group.widgets.values() for group in groups];
                dummy python: widgets.insert(0, view.widgets.values())"
        repeat="group_of_widgets widgets">
       <tal:widget_loop repeat="widget group_of_widgets">
        <div class="discreet"
              tal:condition="python: not widget.name.replace('form.widgets.', '') in excludedFields and widget.value not in (None, '', '--NOVALUE--', u'', (), [], ['--NOVALUE--'])">
          <label class="horizontal" tal:content="widget/label" />
          <div tal:content="structure widget/render" />
        </div>
       </tal:widget_loop>
    </tal:loop>
  </tal:dx>
  <tal:at condition="not: isDexterity">
    <tal:loop
        repeat="field python: obj.Schema().filterFields(isMetadata=False)">
        <span class="discreet"
              tal:condition="python: not field.getName() in excludedFields and (field.getAccessor(obj)() or field.type == 'boolean')">
          <metal:field use-macro="obj/widgets/field/macros/view" />
        </span>
    </tal:loop>
  </tal:at>
</tal:defines>
</metal:additionalInformations>

<metal:categoriesInMeetingConfig define-macro="categoriesInConfig" i18n:domain="PloneMeeting">
<tal:comment replace="nothing">Macro used to display categories/classifiers in a MeetingConfig.
The parameter "cFolder" is the folder containing categories.</tal:comment>
<tal:defines define="cFolderUrl cFolder/absolute_url;
                     objs python: cFolder.objectValues();
                     threshold python: not 'show_every_categories' in context.REQUEST and 50 or 0;
                     too_much_cats python: threshold and len(objs) > threshold;">
<table class="listing nosort" align="right" width="100%">
  <tr>
    <th class="nosort" i18n:translate="listingheader_title">Title</th>
    <th class="nosort" width="20%" i18n:translate="PloneMeeting_label_categoryId">Category id</th>
    <th class="nosort" width="50px" i18n:translate="heading_is_active">Active?</th>
    <th class="nosort" width="130px" i18n:translate="heading_actions">Actions</th>
  </tr>
  <tr tal:condition="not: objs">
    <td colspan="4" align="center" i18n:translate="">no_category</td>
  </tr>
  <tr tal:condition="too_much_cats">
    <td colspan="4" align="center">
     <span i18n:translate="too_many_categories_use_folder_contents" style="color: red; font-style: italic;">
      There are too much categories to display.
     </span>
    </td>
  </tr>
  <tal:loop repeat="obj objs" condition="python: not threshold or len(objs) <= threshold">
  <tr tal:define="isActive obj/enabled;
                  oddrow repeat/obj/odd;
                  classOddEven python: oddrow and 'even' or 'odd';" valign="top"
        tal:attributes="class python: not isActive and classOddEven+' state-inactive' or classOddEven"
        class="#">
    <td>
        <h5><a tal:attributes="href obj/absolute_url" tal:content="obj/Title"></a></h5>
        <div class="discreet" tal:define="descr obj/Description" tal:condition="descr" tal:content="descr"></div>
        <tal:additionalInformations
            define="context python: obj;
                    excludedFields python: ('id', 'description', 'title')">
            <metal:addtionalInformations use-macro="here/@@pm-macros/additionalInformations" />
        </tal:additionalInformations>
    </td>
    <td tal:content="obj/category_id"></td>
    <td i18n:domain="plone">
      <span tal:condition="isActive" i18n:translate="">Yes</span>
      <span tal:condition="not: isActive" i18n:translate="">No</span>
    </td>
    <td align="right">
      <tal:actions replace="structure python: obj.restrictedTraverse('@@actions_panel')(showActions=False, showTransitions=False, showArrows=True)" />
    </td>
  </tr>
  </tal:loop>
</table>
<p tal:condition="too_much_cats" i18n:translate="categories_force_display_descr">
  You can <a i18n:name="force_display" i18n:translate="categories_force_display" href=".?pageName=data&show_every_categories=1#categories">force display</a> of every categories.
</p>
<p i18n:translate="categories_use_folder_contents" tal:condition="isRealManager">
  You can <a i18n:name="force_display" i18n:translate="categories_force_display" href="./?pageName=data&show_every_categories=1">force display</a> of every categories or you may use the <a i18n:name="folder_contents_link" i18n:translate="categories_folder_contents_view" href="#" tal:attributes="href string:${cFolder/absolute_url}/folder_contents">"Folder contents" view</a> to manage elements order.
</p>
</tal:defines>
</metal:categoriesInMeetingConfig>

<metal:proposingGroupUsers define-macro="proposingGroupUsers" i18n:domain="PloneMeeting">
<tal:comment replace="nothing">Tooltipster displaying proposing group users.</tal:comment>
  <acronym tal:condition="context/displayProposingGroupUsers">
    <a onclick="event.preventDefault();"
       class="tooltipster-group-users deactivated"
       style='display: inline-block; padding: 0'
       href='#'
       tal:attributes="data-base_url context_url;
                       data-group_ids string:${proposingGroup/UID}*;">
      <img tal:attributes="src string:${portal_url}/group_users.png" />
    </a>
  </acronym>
</metal:proposingGroupUsers>
