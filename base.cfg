[buildout]

extensions = mr.developer
dump-picked-versions-file = versions-picked.cfg
overwrite-picked-versions-file = true
allow-picked-versions = false

parts =
    productdistros
    svnproducts
    omelette
    instance1
    zopepy

# If you want to get the last versions of eggs, you have to comment the line "versions-prod.cfg"
extends = 
    http://dist.plone.org/release/4.1.6/versions.cfg
    versions-base.cfg

versions=versions

# Add additional egg download sources here. dist.plone.org contains archives
# of Plone packages.
find-links =
    http://dist.plone.org/
    http://dist.plone.org/thirdparty
    http://download.zope.org/ppix/
    http://download.zope.org/distribution/
    http://effbot.org/downloads
    http://b.pypi.python.org
    http://c.pypi.python.org
    http://d.pypi.python.org

sources = sources
sources-dir = devel
auto-checkout = appy
                communesplone.iconified_document_actions
                communesplone.layout
                plonetheme.imioapps

# Add additional eggs here
# elementtree is required by Plone
eggs =
    Plone
    Pillow
#    PyXML

# Reference any eggs you are developing here, one per line
# e.g.: develop = src/my.package
develop = .

# Only take stable eggs
#prefer-final = true

# Always unzip eggs
unzip = true

# Use this section to download additional old-style products.
# List any number of URLs for product tarballs under URLs (separate
# with whitespace, or break over several lines, with subsequent lines
# indented). If any archives contain several products inside a top-level
# directory, list the archive file name (i.e. the last part of the URL,
# normally with a .tar.gz suffix or similar) under 'nested-packages'.
# If any archives extract to a product directory with a version suffix, list
# the archive name under 'version-suffix-packages'.

[sources]
communesplone.iconified_document_actions = svn http://svn.communesplone.org/svn/communesplone/communesplone.iconified_document_actions/trunk/
communesplone.layout = svn http://svn.communesplone.org/svn/communesplone/communesplone.layout/trunk
plonetheme.imioapps = svn http://svn.communesplone.org/svn/communesplone/plonetheme.imioapps/trunk
appy = svn http://svn.communesplone.org/svn/communesplone/appy/tags/0.8.2/

[productdistros]
recipe = plone.recipe.distros
urls = 
#    file://${buildout:directory}/ZPsycopgDA_2013.tgz
nested-packages = 
version-suffix-packages = 

[svnproducts]
recipe = infrae.subversion
urls =
    http://svn.communesplone.org/svn/communesplone/CPUtils/trunk CPUtils

[omelette]
recipe = collective.recipe.omelette
eggs = ${instance1:eggs}

[instance1]
recipe = plone.recipe.zope2instance
#effective-user = 
user = admin:admin
http-address = 8081
zserver-threads = 4
debug-mode = off
verbose-security = off
zope-conf-additional =
  %define FILESTORAGE ${buildout:directory}/var/filestorage
  %define BLOBSTORAGE ${buildout:directory}/var/blobstorage
  %include ${buildout:directory}/zope_add.conf
environment-vars =
  PYTHON_EGG_CACHE ${buildout:directory}/python-eggs
  zope_i18n_compile_mo_files true

# If you want Zope to know about any additional eggs, list them here.
# This should include any development eggs you listed in develop-eggs above,
# e.g. eggs = ${buildout:eggs} my.package
eggs =
    ${buildout:eggs}
    Products.DocFinderTab
    communesplone.iconified_document_actions
    communesplone.layout
    collective.ckeditor
    appy
    Products.PloneMeeting
    plonetheme.imioapps

# If you want to register ZCML slugs for any packages, list them here.
# e.g. zcml = my.package my.other.package
zcml =
    communesplone.iconified_document_actions
    communesplone.layout
    collective.ckeditor
#This is needed so plone translations overrides are taken into account
    Products.PloneMeeting
    Products.PloneMeeting-overrides
    plonetheme.imioapps

products =
    ${productdistros:location}
    ${svnproducts:location}

[zopepy]
recipe = zc.recipe.egg
eggs = ${instance1:eggs}
interpreter = zopepy
scripts = zopepy

# create bin/test command
[test]
recipe = zc.recipe.testrunner
defaults = ['--auto-color', '--auto-progress']
eggs =
    Products.PloneMeeting [test]
environment = testenv

[testenv]
zope_i18n_compile_mo_files = true
